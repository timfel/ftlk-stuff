# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
i18n_type 1 
i18n_include "i18n.h" 
i18n_function _ 
header_name {.H} 
code_name {.cxx}
comment {//
// "$Id: Fl_Print_Dialog.fl 439 2006-12-08 03:26:01Z mike $"
//
// flPhoto print dialog.
//
// Copyright 2002-2006 by Michael Sweet.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
} {in_source in_header
} 

class Fl_Print_Dialog {open
} {
  decl {const char *(*callback_)(Fl_Print_Dialog *pd, void *);} {}
  decl {void *calldata_;} {}
  decl {Fl_Image_Browser *image_browser_;} {}
  decl {char mat_colors_[16][8];} {}
  decl {Fl_RGB_Image *mat_preview_image_;} {}
  decl {void *ppd_;} {}
  decl {char progress_label_[1024];} {}
  decl {const char *title_;} {}
  Function {date_update_cb()} {open private return_type void
  } {
    code {char	line[1024];

snprintf(line, sizeof(line), "%04d-%02d-%02d\\t%s\\t%s",
         (int)date_year_->value(),
         (int)date_month_->value(),
         (int)date_day_->value(),
         date_repeat_button_->value() ? "REPEAT" : "ONCE",
         date_comment_->value());

int i = date_browser_->value();
date_browser_->remove(i);
date_browser_->insert(i, line);
date_browser_->value(i);} {}
  }
  decl {void load_prefs();} {}
  decl {void load_printers();} {}
  decl {void mat_color_cb(Fl_Widget *w);} {}
  decl {void mat_type_cb();} {}
  decl {void media_cb();} {}
  decl {static void ppd_cb(Fl_Widget *w, void *d);} {}
  decl {void print_cb();} {}
  decl {void printer_cb();} {}
  decl {void save_prefs();} {}
  decl {enum { CALENDAR_AUTO = -1, CALENDAR_LEFT, CALENDAR_TOP };} {public
  }
  decl {enum { CALENDAR_PAGE = 0, CALENDAR_FOLDED_FRONT_PAGES, CALENDAR_FOLDED_BACK_PAGES, CALENDAR_FOLDED_ALL_PAGES, CALENDAR_BOUND_FRONT_PAGES, CALENDAR_BOUND_BACK_PAGES, CALENDAR_BOUND_ALL_PAGES };} {public
  }
  decl {enum { MAT_BLANK, MAT_PLAIN, MAT_STANDARD, MAT_VELVET };} {public
  }
  decl {enum { MODE_GRAYSCALE, MODE_COLOR };} {public
  }
  decl {enum { PRINT_CURRENT, PRINT_SELECTED, PRINT_ALL };} {public
  }
  decl {enum { PRINT_INDEX, PRINT_1UP, PRINT_2UP, PRINT_4UP, PRINT_PORTRAIT, PRINT_CALENDAR, PRINT_MATTED };} {public
  }
  decl {enum { QUALITY_DRAFT, QUALITY_NORMAL, QUALITY_BEST };} {public
  }
  Function {Fl_Print_Dialog()} {open
  } {
    Fl_Window window_ {
      label Print open
      private xywh {337 21 435 410} type Double resizable
      code0 {\#include "Fl_Image_Browser.H"}
      code1 {\#include "flstring.h"}
      code2 {\#include "SpringWindow.h"}
      class SpringWindow modal visible
    } {
      Fl_Group control_group_ {open
        private xywh {10 10 415 390} resizable
      } {
        Fl_Choice printer_chooser_ {
          label {Printer: }
          callback {printer_cb();} open
          private xywh {200 10 225 25} down_box BORDER_BOX labelfont 1
        } {}
        Fl_Check_Button print_to_file_button_ {
          label {Print to File}
          private xywh {200 40 225 25} down_box DOWN_BOX
        }
        Fl_Tabs tabs_ {open
          private xywh {10 80 415 285} box THIN_DOWN_BOX color 48 resizable
          code0 {\#include "MenuTabs.h"}
          code1 {tabs_->auto_resize(true);}
          class MenuTabs
        } {
          Fl_Group general_tab_ {
            label General
            private xywh {10 105 415 235} hide
            code0 {general_tab_->do_layout();}
            class SmartGroup
          } {
            Fl_Group {} {
              label {Which:



}
              private xywh {175 115 240 80} color 50 labelfont 1 align 4
            } {
              Fl_Round_Button print_current_button_ {
                label {Current Image}
                callback {matcolors(image_browser_);}
                private xywh {180 115 235 25} type Radio down_box ROUND_DOWN_BOX value 1 color 50
              }
              Fl_Round_Button print_selected_button_ {
                label {Selected Images}
                callback {matcolors(image_browser_);}
                private xywh {180 140 235 25} type Radio down_box ROUND_DOWN_BOX color 50
              }
              Fl_Round_Button print_all_button_ {
                label {All Images}
                callback {matcolors(image_browser_);}
                private xywh {180 165 235 25} type Radio down_box ROUND_DOWN_BOX color 50
              }
            }
            Fl_Group {} {
              label {Format:} open
              private xywh {180 195 235 30} labelfont 1 align 4
            } {
              Fl_Button print_index_button_ {
                callback {calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {Thumbnail Pages} image {icons/print_index.xpm} xywh {180 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX value 1 selection_color 15
              }
              Fl_Button print_1up_button_ {
                callback {calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {1-Up Pages} image {icons/print_1up.xpm} xywh {215 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX selection_color 15
              }
              Fl_Button print_2up_button_ {
                callback {calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {2-Up Pages} image {icons/print_2up.xpm} xywh {250 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX selection_color 15
              }
              Fl_Button print_4up_button_ {
                callback {calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {4-Up Pages} image {icons/print_4up.xpm} xywh {285 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX selection_color 15
              }
              Fl_Button print_portrait_button_ {
                callback {calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {Small and Medium Portrait + Wallet Prints} image {icons/print_portrait.xpm} xywh {320 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX color 7 selection_color 15
              }
              Fl_Button print_calendar_button_ {
                callback {calendar_group_->activate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip Calendars image {icons/print_cal.xpm} xywh {355 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX selection_color 15
              }
              Fl_Button print_matted_button_ {
                callback {mat_group_->activate();
calendar_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);}
                private tooltip {Matted Images} image {icons/print_mat.xpm} xywh {390 195 25 30} type Radio box THIN_UP_BOX down_box THIN_DOWN_BOX selection_color 15
              }
            }
            Fl_Spinner copies_value_ {
              label {Copies:}
              private xywh {180 235 45 25} labelfont 1 value 1
            }
            Fl_Choice quality_chooser_ {
              label {Quality:}
              private xywh {180 270 165 25} down_box BORDER_BOX labelfont 1
            } {
              MenuItem {} {
                label Draft
                private xywh {30 30 100 20}
              }
              MenuItem {} {
                label Normal
                private xywh {40 40 100 20}
              }
              MenuItem {} {
                label Best
                private xywh {50 50 100 20}
              }
            }
            Fl_Choice mode_chooser_ {
              label {Mode:}
              private xywh {180 305 165 25} down_box BORDER_BOX labelfont 1
            } {
              MenuItem {} {
                label Grayscale
                private xywh {40 40 100 20}
              }
              MenuItem {} {
                label Color
                private xywh {50 50 100 20}
              }
            }
          }
          Fl_Group printer_tab_ {
            label Printer
            private xywh {10 105 415 230}
          } {
            Fl_Choice media_chooser_ {
              label {Media Size:}
              callback {media_cb();} open
              private xywh {225 115 190 25} down_box BORDER_BOX labelfont 1
            } {}
            Fl_Group media_group_ {open
              private xywh {225 145 165 25} deactivate
            } {
              Fl_Spinner media_width_value_ {
                label x
                private xywh {225 145 50 25} align 8 maximum 999 step 0.01 value 1
              }
              Fl_Spinner media_length_value_ {selected
                private xywh {290 145 50 25} align 8 maximum 999 step 0.01 value 1
              }
              Fl_Choice media_units_ {
                private xywh {340 145 50 25} down_box BORDER_BOX
              } {
                MenuItem {} {
                  label cm
                  private xywh {10 10 100 20}
                }
                MenuItem {} {
                  label in
                  private xywh {20 20 100 20}
                }
                MenuItem {} {
                  label mm
                  private xywh {30 30 100 20}
                }
                MenuItem {} {
                  label pt
                  private xywh {40 40 100 20}
                }
              }
            }
            Fl_Scroll ppd_scroll_ {open
              private xywh {20 180 395 145} type VERTICAL_ALWAYS box FLAT_BOX color 48 deactivate
            } {}
          }
          Fl_Group calendar_group_ {
            label Calendar
            private xywh {10 105 415 250} hide
            code0 {calendar_group_->do_layout();}
            class SmartGroup
          } {
            Fl_Choice calendar_day_chooser_ {
              label {Start Day:}
              private xywh {140 120 110 25} down_box BORDER_BOX labelfont 1
            } {
              MenuItem {} {
                label Saturday
                private xywh {10 10 100 20}
              }
              MenuItem {} {
                label Sunday
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label Monday
                private xywh {30 30 100 20}
              }
            }
            Fl_Choice calendar_month_chooser_ {
              label {Start Month:}
              private xywh {140 155 110 25} down_box BORDER_BOX labelfont 1
            } {
              MenuItem {} {
                label January
                private xywh {0 0 100 20}
              }
              MenuItem {} {
                label February
                private xywh {10 10 100 20}
              }
              MenuItem {} {
                label March
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label April
                private xywh {30 30 100 20}
              }
              MenuItem {} {
                label May
                private xywh {40 40 100 20}
              }
              MenuItem {} {
                label June
                private xywh {50 50 100 20}
              }
              MenuItem {} {
                label July
                private xywh {60 60 100 20}
              }
              MenuItem {} {
                label August
                private xywh {70 70 100 20}
              }
              MenuItem {} {
                label September
                private xywh {80 80 100 20}
              }
              MenuItem {} {
                label October
                private xywh {90 90 100 20}
              }
              MenuItem {} {
                label November
                private xywh {100 100 100 20}
              }
              MenuItem {} {
                label December
                private xywh {110 110 100 20}
              }
            }
            Fl_Spinner calendar_year_value_ {
              label {Start Year:}
              private xywh {140 190 55 25} labelfont 1 minimum 1970 maximum 2037 value 2002
            }
            Fl_Group {} {
              label {Image Position:}
              xywh {140 225 190 50} labelfont 1 align 4
              code0 {o->do_layout(FL_ALIGN_LEFT, 0, 10, 0);}
              class SmartGroup
            } {
              Fl_Round_Button calendar_left_button_ {
                label Left
                private xywh {140 225 90 25} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button calendar_top_button_ {
                label Top
                private xywh {230 225 100 25} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button calendar_auto_button_ {
                label Auto
                private xywh {140 250 190 25} type Radio down_box ROUND_DOWN_BOX value 1
              }
            }
            Fl_Choice calendar_type_chooser_ {
              label {Type:}
              private xywh {140 285 190 25} down_box BORDER_BOX labelfont 1
            } {
              MenuItem {} {
                label Page
                private xywh {0 0 100 20}
              }
              MenuItem {} {
                label {Folded, Front Pages}
                private xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Folded, Back Pages}
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label {Folded, All Pages}
                private xywh {30 30 100 20}
              }
              MenuItem {} {
                label {Bound, Front Pages}
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label {Bound, Back Pages}
                private xywh {30 30 100 20}
              }
              MenuItem {} {
                label {Bound, All Pages}
                private xywh {40 40 100 20}
              }
            }
            Fl_Group {} {
              label {Date File:}
              xywh {140 320 275 25} labelfont 1 align 4
            } {
              Fl_Input calendar_file_field_ {
                private xywh {140 320 225 25} textfont 4
              }
              Fl_Button {} {
                label {...}
                callback {const char *f = fl_file_chooser("Date File?",
                    "Text Files (*.txt)",
                    calendar_file_field_->value());

if (f)
  calendar_file_field_->value(f);}
                private xywh {365 320 25 25}
                code0 {\#include <FL/Fl_File_Chooser.H>}
              }
              Fl_Button {} {
                callback {date_window_->hotspot(date_window_);
date_window_->show();

date_browser_->clear();
if (calendar_file_field_->value()[0])
{
  date_browser_->load(calendar_file_field_->value());
  if (!date_browser_->text(date_browser_->size())[0])
    date_browser_->remove(date_browser_->size());
}
date_remove_button_->deactivate();
date_group_->deactivate();
time_t curtime = time(NULL);
struct tm *curdate = localtime(&curtime);
date_year_->value(1900 + curdate->tm_year);
date_month_->value(curdate->tm_mon + 1);
date_day_->value(curdate->tm_mday);
date_repeat_button_->clear();
date_comment_->deactivate();
date_comment_->value("");}
                private image {icons/pencil.xpm} xywh {390 320 25 25}
              }
            }
          }
          Fl_Group mat_group_ {
            label {Matted Images} open
            private xywh {10 105 365 260} hide
          } {
            Fl_Choice mat_type_chooser_ {
              label {Mat Type:}
              callback {mat_type_cb();}
              private xywh {165 120 115 25} down_box BORDER_BOX labelfont 1
              code0 {mat_type_chooser_->value(0);}
            } {
              MenuItem {} {
                label Blank
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label Plain
                private xywh {10 10 100 20}
              }
              MenuItem {} {
                label Standard
                private xywh {20 20 100 20}
              }
              MenuItem {} {
                label Velvet
                private xywh {30 30 100 20}
              }
            }
            Fl_Box mat_preview_box_ {
              private xywh {295 120 70 70}
            }
            Fl_Group {} {
              label {Mat Width:}
              xywh {165 155 105 25} labelfont 1 align 4
            } {
              Fl_Spinner mat_width_value_ {
                private xywh {165 155 45 25} minimum 0.1 maximum 10 step 0.1 value 2
              }
              Fl_Choice mat_width_units_ {
                private xywh {210 155 60 25} down_box BORDER_BOX
              } {
                MenuItem {} {
                  label cm
                  private xywh {25 25 100 20}
                }
                MenuItem {} {
                  label in
                  private xywh {35 35 100 20}
                }
                MenuItem {} {
                  label mm
                  private xywh {45 45 100 20}
                }
                MenuItem {} {
                  label pt
                  private xywh {55 55 100 20}
                }
              }
            }
            Fl_Input mat_color_field_ {
              label {Mat Color:}
              callback {mat_color_cb(mat_color_field_);}
              private xywh {165 190 70 25} labelfont 1 when 1 textfont 4
            }
            Fl_Button mat_color_button_ {
              label {...}
              callback {mat_color_cb(mat_color_button_);}
              private xywh {235 190 25 25} color 136
            }
            Fl_Button {mat_color_buttons_[0]} {
              callback {mat_color_cb(mat_color_buttons_[0]);}
              private xywh {165 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[1]} {
              callback {mat_color_cb(mat_color_buttons_[1]);}
              private xywh {190 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[2]} {
              callback {mat_color_cb(mat_color_buttons_[2]);}
              private xywh {215 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[3]} {
              callback {mat_color_cb(mat_color_buttons_[3]);}
              private xywh {240 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[4]} {
              callback {mat_color_cb(mat_color_buttons_[4]);}
              private xywh {265 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[5]} {
              callback {mat_color_cb(mat_color_buttons_[5]);}
              private xywh {290 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[6]} {
              callback {mat_color_cb(mat_color_buttons_[6]);}
              private xywh {315 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[7]} {
              callback {mat_color_cb(mat_color_buttons_[7]);}
              private xywh {340 220 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[8]} {
              callback {mat_color_cb(mat_color_buttons_[8]);}
              private xywh {165 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[9]} {
              callback {mat_color_cb(mat_color_buttons_[9]);}
              private xywh {190 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[10]} {
              callback {mat_color_cb(mat_color_buttons_[10]);}
              private xywh {215 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[11]} {
              callback {mat_color_cb(mat_color_buttons_[11]);}
              private xywh {240 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[12]} {
              callback {mat_color_cb(mat_color_buttons_[12]);}
              private xywh {265 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[13]} {
              callback {mat_color_cb(mat_color_buttons_[13]);}
              private xywh {290 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[14]} {
              callback {mat_color_cb(mat_color_buttons_[14]);}
              private xywh {315 235 25 15} box BORDER_BOX color 0
            }
            Fl_Button {mat_color_buttons_[15]} {
              callback {mat_color_cb(mat_color_buttons_[15]);}
              private xywh {340 235 25 15} box BORDER_BOX color 0
            }
            Fl_Group image_group_ {
              label {Image Size:}
              private xywh {165 260 175 25} labelfont 1 align 4
            } {
              Fl_Spinner image_width_value_ {
                label x
                private xywh {165 260 50 25} align 8 maximum 999 step 0.01 value 6
                code0 {image_width_value_->format("%.2f");}
              }
              Fl_Spinner image_length_value_ {
                private xywh {230 260 50 25} align 8 maximum 999 step 0.01 value 4
                code0 {image_length_value_->format("%.2f");}
              }
              Fl_Choice image_units_ {
                private xywh {280 260 60 25} down_box BORDER_BOX
              } {
                MenuItem {} {
                  label cm
                  private xywh {25 25 100 20}
                }
                MenuItem {} {
                  label in
                  private xywh {35 35 100 20}
                }
                MenuItem {} {
                  label mm
                  private xywh {45 45 100 20}
                }
                MenuItem {} {
                  label pt
                  private xywh {55 55 100 20}
                }
              }
            }
            Fl_Spinner image_cols_value_ {
              label {Image Columns:}
              private xywh {165 295 35 25} labelfont 1 maximum 20 value 1
            }
            Fl_Spinner image_rows_value_ {
              label {Rows:}
              private xywh {270 295 35 25} labelfont 1 maximum 20 value 1
            }
            Fl_Group {} {
              label {Options:} open
              xywh {165 330 200 25} labelfont 1 align 4
            } {
              Fl_Check_Button mat_comments_button_ {
                label {Show Comments}
                private xywh {165 330 200 25} down_box DOWN_BOX
              }
            }
          }
        }
        Fl_Group {} {open
          xywh {10 375 415 25}
          code0 {\#include "SmartGroup.h"}
          code1 {o->do_layout(FL_ALIGN_RIGHT, 0);}
          code2 {o->child_align(FL_ALIGN_RIGHT);}
          class SmartGroup
        } {
          Fl_Return_Button {} {
            label Print
            callback {print_cb();}
            private xywh {215 375 105 25} shortcut 0xff0d
            class Fl_Button
          }
          Fl_Button {} {
            label Cancel
            callback {window_->hide();}
            private xywh {330 375 95 25}
          }
        }
      }
      Fl_Progress progress_ {
        label Progress
        private xywh {10 375 195 25} selection_color 4 labelfont 2
      }
    }
    Fl_Window date_window_ {
      label {Calendar Dates} open
      private xywh {610 21 425 325} type Double
      code0 {\#include <errno.h>} modal visible
    } {
      Fl_Group {} {open
        xywh {10 10 405 270} box THIN_DOWN_BOX color 48
      } {
        Fl_Browser date_browser_ {
          label {Dates:}
          callback {if (date_browser_->value())
{
  char	line[1024],
	*repeat,
	*comment;
  int	year, month, day;


  strlcpy(line, date_browser_->text(date_browser_->value()), sizeof(line));
  if ((repeat = strchr(line, '\\t')) != NULL)
  {
    *repeat++ = '\\0';

    if ((comment = strchr(repeat, '\\t')) != NULL)
    {
      *comment++ = '\\0';
      date_comment_->value(comment);
    }
    else
      date_comment_->value("");

    if (!strcmp(repeat, "REPEAT"))
      date_repeat_button_->set();
    else
      date_repeat_button_->clear();
  }
  else
  {
    date_repeat_button_->clear();
    date_comment_->value("");
  }

  year = 0;
  month = day = 1;

  sscanf(line, "%d-%d-%d", &year, &month, &day);

  date_year_->value(year);
  date_month_->value(month);
  date_day_->value(day);

  date_group_->activate();
  date_comment_->activate();
  date_remove_button_->activate();
}
else
{
  date_group_->deactivate();
  time_t curtime = time(NULL);
  struct tm *curdate = localtime(&curtime);
  date_year_->value(1900 + curdate->tm_year);
  date_month_->value(curdate->tm_mon + 1);
  date_day_->value(curdate->tm_mday);
  date_repeat_button_->clear();
  date_comment_->deactivate();
  date_comment_->value("");
  date_remove_button_->deactivate();
}}
          private xywh {20 38 385 125} type Hold labelfont 1 align 5 when 3
        }
        Fl_Button {} {
          label {@-5plus}
          callback {time_t curtime = time(NULL);
struct tm *curdate = localtime(&curtime);
char s[255];

snprintf(s, sizeof(s), "%04d-%02d-%02d\\tONCE\\tNew date",
         curdate->tm_year + 1900,
         curdate->tm_mon + 1,
         curdate->tm_mday);

date_browser_->add(s);
date_browser_->value(date_browser_->size());
date_browser_->do_callback();}
          xywh {20 170 20 20}
          code0 {\#include <time.h>}
        }
        Fl_Button date_remove_button_ {
          label {@-33plus}
          callback {if (date_browser_->value())
{
  date_browser_->remove(date_browser_->value());
  date_browser_->do_callback();
}}
          private xywh {50 170 20 20} deactivate
        }
        Fl_Group {} {open
          xywh {20 180 385 100}
          code0 {o->do_layout();}
          class SmartGroup
        } {
          Fl_Group date_group_ {
            label {
Date:} open
            private xywh {95 190 300 45} labelfont 1 align 4 deactivate
          } {
            Fl_Check_Button date_repeat_button_ {
              label {Repeat Every Year}
              callback {date_update_cb();}
              private xywh {228 210 167 25} down_box DOWN_BOX
            }
            Fl_Spinner date_year_ {
              label Year
              callback {date_update_cb();}
              private xywh {95 210 53 25} align 1 when 1 minimum 1900 maximum 2037 value 2006
              code0 {date_year_->format("%04.0f");}
            }
            Fl_Spinner date_month_ {
              label Mon
              callback {date_update_cb();}
              private xywh {148 210 35 25} align 1 when 1 maximum 12 value 12
              code0 {date_month_->format("%02.0f");}
            }
            Fl_Spinner date_day_ {
              label Day
              callback {date_update_cb();}
              private xywh {183 210 35 25} align 1 when 1 maximum 31 value 31
              code0 {date_day_->format("%02.0f");}
            }
          }
          Fl_Input date_comment_ {
            label {Comment:}
            callback {date_update_cb();}
            private xywh {95 245 300 25} labelfont 1 deactivate
          }
        }
        Fl_Button {} {
          label {@-4reload}
          callback {int i, j;
date_browser_->deselect(1);
date_browser_->do_callback();
for (i = 1; i < date_browser_->size(); i ++)
  for (j = i + 1; j <= date_browser_->size(); j ++)
    if (strcasecmp(date_browser_->text(i),
                   date_browser_->text(j)) > 0)
      date_browser_->swap(i, j);}
          xywh {80 170 20 20}
        }
      }
      Fl_Group {} {open
        xywh {10 290 405 25}
        code0 {o->do_layout(FL_ALIGN_RIGHT, 0);}
        code1 {o->child_align(FL_ALIGN_RIGHT);}
        class SmartGroup
      } {
        Fl_Button {} {
          label {Save Dates}
          callback {const char *cname = calendar_file_field_->value();

if (!*cname)
{
  cname = "/tmp/dates.txt";
  calendar_file_field_->value(cname);
}

FILE *fp = fopen(cname, "w");
if (!fp)
{
  fl_alert(_("Unable to create \\"%s\\":\\n%s"),
           cname, strerror(errno));
  return;
}

for (int i = 1; i <= date_browser_->size(); i ++)
  fprintf(fp, "%s\\n", date_browser_->text(i));

fclose(fp);

date_window_->hide();}
          xywh {240 290 97 25}
        }
        Fl_Button {} {
          label Cancel
          callback {date_window_->hide();}
          xywh {347 290 68 25}
        }
      }
    }
    code {callback_          = 0;
calldata_          = 0;
image_browser_     = 0;
mat_preview_image_ = 0;
ppd_               = 0;
title_             = "(untitled)";

memset(mat_colors_, 0, sizeof(mat_colors_));

progress_hide();

load_printers();
load_prefs();
mat_type_cb();} {}
  }
  Function {~Fl_Print_Dialog()} {open
  } {
    code {delete window_;
if (mat_preview_image_) delete mat_preview_image_;} {}
  }
  Function {calendar(int &day, int &month, int &year, int &orient, int &bound, char *datefile, int dfsize)} {open return_type void
  } {
    code {day   = 8 - calendar_day_chooser_->value();
month = calendar_month_chooser_->value();
year  = (int)calendar_year_value_->value();
if (calendar_left_button_->value()) orient = CALENDAR_LEFT;
else if (calendar_top_button_->value()) orient = CALENDAR_TOP;
else orient = CALENDAR_AUTO;
bound = calendar_type_chooser_->value();
strlcpy(datefile, calendar_file_field_->value(), dfsize);} {}
  }
  Function {callback(const char *(*cb)(Fl_Print_Dialog *pd, void *d), void *d)} {return_type void
  } {
    code {callback_ = cb;
calldata_ = d;} {}
  }
  Function {copies(int c)} {open return_type void
  } {
    code {if (c < 1) c = 1;
if (c > 100) c = 100;

copies_value_->value(c);} {}
  }
  Function {copies()} {open return_type int
  } {
    code {return (int)copies_value_->value();} {}
  }
  decl {void format(int f);} {public
  }
  decl {int format();} {public
  }
  Function {have_ppd()} {open return_type int
  } {
    code {return (ppd_ != 0);} {}
  }
  Function {hide()} {} {
    code {window_->hide();} {}
  }
  decl {void imageable_area(int &left, int &bottom, int &right, int &top);} {public
  }
  decl {void matcolors(Fl_Image_Browser *b);} {public
  }
  decl {void matimage(uchar *data, int alpha = 0);} {public
  }
  decl {void matting(int &type, float &width, uchar *rgb, float &image_width, float &image_height, int &image_cols, int &image_rows, int &show_comments);} {public
  }
  decl {void media(const char *m);} {public
  }
  decl {const char *media();} {public
  }
  Function {mode(int m)} {return_type void
  } {
    code {mode_chooser_->value(m);} {}
  }
  Function {mode()} {return_type int
  } {
    code {return mode_chooser_->value();} {}
  }
  decl {void paper_dimension(int &width, int &length);} {public
  }
  decl {int print_file(const char *f);} {public
  }
  Function {print_to_file()} {open return_type int
  } {
    code {return print_to_file_button_->value() || !printer_chooser_->value();} {}
  }
  decl {void printer(const char *p);} {public
  }
  Function {printer()} {open return_type {const char *}
  } {
    code {if (printer_chooser_->value() <= 0 ||
    printer_chooser_->value() > (printer_chooser_->size() - 1))
  return 0;
else
  return printer_chooser_->text(printer_chooser_->value());} {}
  }
  Function {progress_hide()} {return_type void
  } {
    code {progress_->hide();} {}
  }
  decl {void progress_show(int percent, const char *format, ...);} {public
  }
  Function {quality(int q)} {return_type void
  } {
    code {quality_chooser_->value(q);} {}
  }
  Function {quality()} {return_type int
  } {
    code {return quality_chooser_->value();} {}
  }
  Function {show()} {open
  } {
    code {tabs_->value(general_tab_);
window_->hotspot(window_);
window_->show();
progress_hide();} {}
  }
  Function {shown()} {return_type int
  } {
    code {return window_->shown();} {}
  }
  Function {title(const char *t)} {return_type void
  } {
    code {if (t) title_ = t;
else title_ = "(untitled)";} {}
  }
  Function {title()} {return_type {const char *}
  } {
    code {return title_;} {}
  }
  Function {visible()} {return_type int
  } {
    code {return window_->visible();} {}
  }
  decl {void which(int w);} {public
  }
  decl {int which();} {public
  }
} 

comment {
//
// End of "$Id: Fl_Print_Dialog.fl 439 2006-12-08 03:26:01Z mike $".
//} {in_source in_header
} 
