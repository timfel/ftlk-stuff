//
// "$Id: flphoto.cxx 412 2006-11-15 04:20:01Z mike $"
//
// flPhoto application window class.
//
// Copyright 2002-2006 by Michael Sweet.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "i18n.h"
#include "flphoto.h"
#include <FL/x.H>

void flphoto::cb_window__i(Fl_Double_Window*, void*) {
  close_album_cb();
}
void flphoto::cb_window_(Fl_Double_Window* o, void* v) {
  ((flphoto*)(o->user_data()))->cb_window__i(o,v);
}

void flphoto::cb_New_i(Fl_Menu_*, void*) {
  new_album_cb();
}
void flphoto::cb_New(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void flphoto::cb_Open_i(Fl_Menu_*, void*) {
  open_album_cb();
}
void flphoto::cb_Open(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void flphoto::cb_File_i(Fl_Menu_*, void*) {
  open_prev_cb(0);
}
void flphoto::cb_File(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File_i(o,v);
}

void flphoto::cb_File1_i(Fl_Menu_*, void*) {
  open_prev_cb(1);
}
void flphoto::cb_File1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File1_i(o,v);
}

void flphoto::cb_File2_i(Fl_Menu_*, void*) {
  open_prev_cb(2);
}
void flphoto::cb_File2(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File2_i(o,v);
}

void flphoto::cb_File3_i(Fl_Menu_*, void*) {
  open_prev_cb(3);
}
void flphoto::cb_File3(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File3_i(o,v);
}

void flphoto::cb_File4_i(Fl_Menu_*, void*) {
  open_prev_cb(4);
}
void flphoto::cb_File4(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File4_i(o,v);
}

void flphoto::cb_File5_i(Fl_Menu_*, void*) {
  open_prev_cb(5);
}
void flphoto::cb_File5(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File5_i(o,v);
}

void flphoto::cb_File6_i(Fl_Menu_*, void*) {
  open_prev_cb(6);
}
void flphoto::cb_File6(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File6_i(o,v);
}

void flphoto::cb_File7_i(Fl_Menu_*, void*) {
  open_prev_cb(7);
}
void flphoto::cb_File7(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File7_i(o,v);
}

void flphoto::cb_File8_i(Fl_Menu_*, void*) {
  open_prev_cb(8);
}
void flphoto::cb_File8(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File8_i(o,v);
}

void flphoto::cb_File9_i(Fl_Menu_*, void*) {
  open_prev_cb(9);
}
void flphoto::cb_File9(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_File9_i(o,v);
}

void flphoto::cb_Save_i(Fl_Menu_*, void*) {
  save_album_cb();
}
void flphoto::cb_Save(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void flphoto::cb_Save1_i(Fl_Menu_*, void*) {
  save_album_as_cb();
}
void flphoto::cb_Save1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void flphoto::cb_Close_i(Fl_Menu_*, void*) {
  close_album_cb();
}
void flphoto::cb_Close(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void flphoto::cb_Camera_i(Fl_Menu_*, void*) {
  camera_cb();
}
void flphoto::cb_Camera(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Camera_i(o,v);
}

void flphoto::cb_Directory_i(Fl_Menu_*, void*) {
  add_dir_cb();
}
void flphoto::cb_Directory(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Directory_i(o,v);
}
void flphoto::cb_Directories(Fl_Menu_* o, void*) {
  char* newfile;
  newfile = fl_dir_chooser("Choose top dir...","",0);
	if (newfile != NULL)
	{
		((flphoto*)(o->parent()->user_data()))->cb_Directories2albums((const char*)newfile,(const char*)newfile);
	}
}
void flphoto::cb_Image_i(Fl_Menu_*, void*) {
  add_file_cb();
}
void flphoto::cb_Image(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Image_i(o,v);
}

void flphoto::cb_Directory1_i(Fl_Menu_*, void*) {
  export_dir_cb();
}
void flphoto::cb_Directory1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Directory1_i(o,v);
}

void flphoto::cb_HTML_i(Fl_Menu_*, void*) {
  export_html_cb();
}
void flphoto::cb_HTML(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_HTML_i(o,v);
}

void flphoto::cb_Print_i(Fl_Menu_*, void*) {
  print_album_cb();
}
void flphoto::cb_Print(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Print_i(o,v);
}

void flphoto::cb_Slidesho_i(Fl_Menu_*, void*) {
  slideshow_cb();
}
void flphoto::cb_Slidesho(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Slidesho_i(o,v);
}

void flphoto::cb_By_i(Fl_Menu_*, void*) {
  sort_album_cb(0);
}
void flphoto::cb_By(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_By_i(o,v);
}

void flphoto::cb_Reverse_i(Fl_Menu_*, void*) {
  sort_album_cb(2);
}
void flphoto::cb_Reverse(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Reverse_i(o,v);
}

void flphoto::cb_By1_i(Fl_Menu_*, void*) {
  sort_album_cb(1);
}
void flphoto::cb_By1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_By1_i(o,v);
}

void flphoto::cb_Reverse1_i(Fl_Menu_*, void*) {
  sort_album_cb(3);
}
void flphoto::cb_Reverse1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Reverse1_i(o,v);
}

void flphoto::cb_P_i(Fl_Menu_*, void*) {
  props_album_cb();
}
void flphoto::cb_P(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_P_i(o,v);
}

void flphoto::cb_Quit_i(Fl_Menu_*, void*) {
  quit_cb();
}
void flphoto::cb_Quit(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void flphoto::cb_Open1_i(Fl_Menu_*, void*) {
  open_image_cb();
}
void flphoto::cb_Open1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Open1_i(o,v);
}

void flphoto::cb_Edit_i(Fl_Menu_*, void*) {
  edit_image_cb();
}
void flphoto::cb_Edit(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Edit_i(o,v);
}

void flphoto::cb_Save2_i(Fl_Menu_*, void*) {
  save_image_cb();
}
void flphoto::cb_Save2(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void flphoto::cb_Save3_i(Fl_Menu_*, void*) {
  save_image_as_cb();
}
void flphoto::cb_Save3(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void flphoto::cb_Print1_i(Fl_Menu_*, void*) {
  print_image_cb();
}
void flphoto::cb_Print1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Print1_i(o,v);
}

void flphoto::cb_Remove_i(Fl_Menu_*, void*) {
  remove_image_cb();
}
void flphoto::cb_Remove(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Remove_i(o,v);
}

void flphoto::cb_Pur_i(Fl_Menu_*, void*) {
  purge_image_cb();
}
void flphoto::cb_Pur(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Pur_i(o,v);
}

void flphoto::cb_P1_i(Fl_Menu_*, void*) {
  props_image_cb();
}
void flphoto::cb_P1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_P1_i(o,v);
}

void flphoto::cb_Re_i(Fl_Menu_*, void*) {
  revert_image_cb();
}
void flphoto::cb_Re(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Re_i(o,v);
}

void flphoto::cb_Auto_i(Fl_Menu_*, void*) {
  auto_adjust_cb();
}
void flphoto::cb_Auto(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Auto_i(o,v);
}

void flphoto::cb_Brightness_i(Fl_Menu_*, void*) {
  adjust_levels_cb();
}
void flphoto::cb_Brightness(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Brightness_i(o,v);
}

void flphoto::cb_Blur_i(Fl_Menu_*, void*) {
  blur_cb();
}
void flphoto::cb_Blur(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Blur_i(o,v);
}

void flphoto::cb_Sharp_i(Fl_Menu_*, void*) {
  sharpen_cb();
}
void flphoto::cb_Sharp(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Sharp_i(o,v);
}

void flphoto::cb_Crop_i(Fl_Menu_*, void*) {
  crop_cb();
}
void flphoto::cb_Crop(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Crop_i(o,v);
}

void flphoto::cb_Rotate_i(Fl_Menu_*, void*) {
  rotate_cb(90);
}
void flphoto::cb_Rotate(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Rotate_i(o,v);
}

void flphoto::cb_Rotate1_i(Fl_Menu_*, void*) {
  rotate_cb(270);
}
void flphoto::cb_Rotate1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Rotate1_i(o,v);
}

void flphoto::cb_Scale_i(Fl_Menu_*, void*) {
  scale_cb();
}
void flphoto::cb_Scale(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Scale_i(o,v);
}

void flphoto::cb_Auto1_i(Fl_Menu_*, void*) {
  display_->scale(0.0f);
}
void flphoto::cb_Auto1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Auto1_i(o,v);
}

void flphoto::cb_25_i(Fl_Menu_*, void*) {
  display_->scale(0.25f);
}
void flphoto::cb_25(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_25_i(o,v);
}

void flphoto::cb_50_i(Fl_Menu_*, void*) {
  display_->scale(0.5f);
}
void flphoto::cb_50(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_50_i(o,v);
}

void flphoto::cb_100_i(Fl_Menu_*, void*) {
  display_->scale(1.0f);
}
void flphoto::cb_100(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_100_i(o,v);
}

void flphoto::cb_albums_(Fl_Select_Browser* o, void*) {
	char help[512] = {'\0'};
	strcpy(help,getenv("HOME"));
	strcat(help,"/.flphoto/");
	strcat(help,o->text(o->value()));
	((flphoto*)(o->parent()->user_data()))->browser_->clear();
	((flphoto*)(o->parent()->user_data()))->open_album_cb((const char*)help);
}

void flphoto::cb_Image1_i(Fl_Menu_*, void*) {
  options_cb(image_tab_);
}
void flphoto::cb_Image1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Image1_i(o,v);
}

void flphoto::cb_Slideshow_i(Fl_Menu_*, void*) {
  options_cb(slideshow_tab_);
}
void flphoto::cb_Slideshow(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Slideshow_i(o,v);
}

void flphoto::cb_Memory_i(Fl_Menu_*, void*) {
  options_cb(flash_tab_);
}
void flphoto::cb_Memory(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Memory_i(o,v);
}

void flphoto::cb_About_i(Fl_Menu_*, void*) {
  help_cb("about.html");
}
void flphoto::cb_About(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void flphoto::cb_Contents_i(Fl_Menu_*, void*) {
  help_cb("contents.html");
}
void flphoto::cb_Contents(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Contents_i(o,v);
}

void flphoto::cb_Albums_i(Fl_Menu_*, void*) {
  help_cb("albums.html");
}
void flphoto::cb_Albums(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Albums_i(o,v);
}

void flphoto::cb_Images_i(Fl_Menu_*, void*) {
  help_cb("images.html");
}
void flphoto::cb_Images(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Images_i(o,v);
}

void flphoto::cb_Download_i(Fl_Menu_*, void*) {
  help_cb("download.html");
}
void flphoto::cb_Download(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Download_i(o,v);
}

void flphoto::cb_Release_i(Fl_Menu_*, void*) {
  help_cb("relnotes.html");
}
void flphoto::cb_Release(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_Release_i(o,v);
}

Fl_Menu_Item flphoto::menu_menubar_[] = {
 {_("&Album"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&New"), 0x4006e,  (Fl_Callback*)flphoto::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Open..."), 0x4006f,  (Fl_Callback*)flphoto::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Open Pre&vious"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 0"), 0,  (Fl_Callback*)flphoto::cb_File, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 1"), 0,  (Fl_Callback*)flphoto::cb_File1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 2"), 0,  (Fl_Callback*)flphoto::cb_File2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 3"), 0,  (Fl_Callback*)flphoto::cb_File3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 4"), 0,  (Fl_Callback*)flphoto::cb_File4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 5"), 0,  (Fl_Callback*)flphoto::cb_File5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 6"), 0,  (Fl_Callback*)flphoto::cb_File6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 7"), 0,  (Fl_Callback*)flphoto::cb_File7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 8"), 0,  (Fl_Callback*)flphoto::cb_File8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("File 9"), 0,  (Fl_Callback*)flphoto::cb_File9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Save"), 0x40073,  (Fl_Callback*)flphoto::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save &As..."), 0x50073,  (Fl_Callback*)flphoto::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Close"), 0x40077,  (Fl_Callback*)flphoto::cb_Close, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Import"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Camera..."), 0x40063,  (Fl_Callback*)flphoto::cb_Camera, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Directory..."), 0x40064,  (Fl_Callback*)flphoto::cb_Directory, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Recursively add Directories..."), 0x40072,  (Fl_Callback*)flphoto::cb_Directories, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Image(s)..."), 0x40069,  (Fl_Callback*)flphoto::cb_Image, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Export"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Directory..."), 0x50064,  (Fl_Callback*)flphoto::cb_Directory1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&HTML..."), 0x50078,  (Fl_Callback*)flphoto::cb_HTML, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Print..."), 0x40070,  (Fl_Callback*)flphoto::cb_Print, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Slidesho&w..."), 0x40020,  (Fl_Callback*)flphoto::cb_Slidesho, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Sort Images"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("By &Date"), 0,  (Fl_Callback*)flphoto::cb_By, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Reverse &By Date"), 0,  (Fl_Callback*)flphoto::cb_Reverse, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("By &Name"), 0,  (Fl_Callback*)flphoto::cb_By1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Reverse By Name"), 0,  (Fl_Callback*)flphoto::cb_Reverse1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("P&roperties..."), 0x4ff0d,  (Fl_Callback*)flphoto::cb_P, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Quit"), 0x40071,  (Fl_Callback*)flphoto::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Image"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Open"), 0xff0d,  (Fl_Callback*)flphoto::cb_Open1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Edit..."), 0x40065,  (Fl_Callback*)flphoto::cb_Edit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Save"), 0x80073,  (Fl_Callback*)flphoto::cb_Save2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Save &As..."), 0x80053,  (Fl_Callback*)flphoto::cb_Save3, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Print..."), 0x80070,  (Fl_Callback*)flphoto::cb_Print1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Remove"), 0xffff,  (Fl_Callback*)flphoto::cb_Remove, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Pur&ge"), 0,  (Fl_Callback*)flphoto::cb_Pur, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("P&roperties..."), 0x8ff0d,  (Fl_Callback*)flphoto::cb_P1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Re&vert"), 0x4007a,  (Fl_Callback*)flphoto::cb_Re, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Touch-Up"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Auto Adjust"), 0xffbf,  (Fl_Callback*)flphoto::cb_Auto, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Brightness + &Contrast..."), 0xffc0,  (Fl_Callback*)flphoto::cb_Brightness, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Blur..."), 0xffc2,  (Fl_Callback*)flphoto::cb_Blur, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Sharp&en..."), 0xffc3,  (Fl_Callback*)flphoto::cb_Sharp, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Tra&nsform"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Crop"), 0x40078,  (Fl_Callback*)flphoto::cb_Crop, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Rotate Counter-Clockwise"), 0x4002c,  (Fl_Callback*)flphoto::cb_Rotate, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Rotate Clockwise"), 0x4002e,  (Fl_Callback*)flphoto::cb_Rotate1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Scale..."), 0,  (Fl_Callback*)flphoto::cb_Scale, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {_("&View"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Auto Zoom"), 0x40030,  (Fl_Callback*)flphoto::cb_Auto1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("25%"), 0x40034,  (Fl_Callback*)flphoto::cb_25, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("50%"), 0x40032,  (Fl_Callback*)flphoto::cb_50, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("100%"), 0x40031,  (Fl_Callback*)flphoto::cb_100, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Options"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Image..."), 0,  (Fl_Callback*)flphoto::cb_Image1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Slideshow..."), 0,  (Fl_Callback*)flphoto::cb_Slideshow, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Memory Card..."), 0,  (Fl_Callback*)flphoto::cb_Memory, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("About flPhoto..."), 0,  (Fl_Callback*)flphoto::cb_About, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Contents..."), 0xffbe,  (Fl_Callback*)flphoto::cb_Contents, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Albums..."), 0,  (Fl_Callback*)flphoto::cb_Albums, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Images..."), 0,  (Fl_Callback*)flphoto::cb_Images, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Download..."), 0,  (Fl_Callback*)flphoto::cb_Download, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Release Notes..."), 0,  (Fl_Callback*)flphoto::cb_Release, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_mode_button__i(Fl_Button*, void*) {
  display_->mode(FL_IMAGE_PAN);
}
void flphoto::cb_mode_button_(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_mode_button__i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_pan[] = {
"16 16 3 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"      .         ",
"    ..+..       ",
"   .+.+.+.      ",
"  ..+.+.+.      ",
" .+.+.+.+.  ..  ",
" .+.+.+.+. .++. ",
" .+.+.+.+..+++. ",
" .+++++++++++.  ",
" .++++++++++.   ",
" .+++++++++.    ",
" .+++++++++.    ",
"  .+++++++.     ",
"  .+++++++.     ",
"  .+++++++.     ",
"   .+++++.      ",
"   .+++++.      "
};
static Fl_Pixmap image_pan(idata_pan);

void flphoto::cb_mode_button_1_i(Fl_Button*, void*) {
  display_->mode(FL_IMAGE_ZOOM_IN);
}
void flphoto::cb_mode_button_1(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_mode_button_1_i(o,v);
}

static const char *idata_zoom_in[] = {
"16 16 3 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"    ....        ",
"  ........      ",
" ..++++++..     ",
" .+++..+++.     ",
"..+++..+++..    ",
"..+......+..    ",
"..+......+..    ",
"..+++..+++..    ",
" .+++..+++.     ",
" ..++++++..     ",
"  ..........    ",
"    ....  ...   ",
"           ...  ",
"            ... ",
"             ...",
"              .."
};
static Fl_Pixmap image_zoom_in(idata_zoom_in);

void flphoto::cb_mode_button_2_i(Fl_Button*, void*) {
  display_->mode(FL_IMAGE_ZOOM_OUT);
}
void flphoto::cb_mode_button_2(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_mode_button_2_i(o,v);
}

static const char *idata_zoom_out[] = {
"16 16 3 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"                ",
"                ",
"    ....        ",
"   .++++.       ",
"  .++++++.      ",
"  .+....+.      ",
"  .+....+.      ",
"  .++++++.      ",
"   .++++..      ",
"    .......     ",
"         ...    ",
"          ...   ",
"           ...  ",
"            ..  ",
"                ",
"                "
};
static Fl_Pixmap image_zoom_out(idata_zoom_out);

void flphoto::cb_mode_button_3_i(Fl_Button*, void*) {
  display_->mode(FL_IMAGE_CLICK);
}
void flphoto::cb_mode_button_3(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_mode_button_3_i(o,v);
}

static const char *idata_redeye[] = {
"16 16 4 1",
". c None",
"# c #000000",
"b c #ff0000",
"a c #ffffff",
"......#..#......",
"....#..##..#....",
"..#..#.##.#..#..",
"#..#.######.#..#",
".#.###aaaa###.#.",
".#.#aaaaaaaa#.#.",
".##aaaabbaaaa##.",
"#aaaaabbbbaaaaa#",
"#aaaaabbbbaaaaa#",
".##aaaabbaaaa##.",
".#.#aaaaaaaa#.#.",
".#.###aaaa###.#.",
"...#.######.#...",
".....#.##.#.....",
"................",
"................"
};
static Fl_Pixmap image_redeye(idata_redeye);

void flphoto::cb_display__i(Fl_Image_Display*, void*) {
  redeye_cb();
}
void flphoto::cb_display_(Fl_Image_Display* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_display__i(o,v);
}

void flphoto::cb_Edit1_i(Fl_Menu_*, void*) {
  edit_selected_image_cb();
}
void flphoto::cb_Edit1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Edit1_i(o,v);
}

void flphoto::cb_Save4_i(Fl_Menu_*, void*) {
  save_selected_image_cb();
}
void flphoto::cb_Save4(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Save4_i(o,v);
}

void flphoto::cb_Print2_i(Fl_Menu_*, void*) {
  print_image_cb();
}
void flphoto::cb_Print2(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Print2_i(o,v);
}

void flphoto::cb_Select_i(Fl_Menu_*, void*) {
  select_image_cb(1);
}
void flphoto::cb_Select(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Select_i(o,v);
}

void flphoto::cb_Select1_i(Fl_Menu_*, void*) {
  select_image_cb(0);
}
void flphoto::cb_Select1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Select1_i(o,v);
}

void flphoto::cb_Remove1_i(Fl_Menu_*, void*) {
  remove_selected_image_cb();
}
void flphoto::cb_Remove1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Remove1_i(o,v);
}

void flphoto::cb_Pur1_i(Fl_Menu_*, void*) {
  purge_selected_image_cb();
}
void flphoto::cb_Pur1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Pur1_i(o,v);
}

void flphoto::cb_Re1_i(Fl_Menu_*, void*) {
  revert_selected_image_cb();
}
void flphoto::cb_Re1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Re1_i(o,v);
}

void flphoto::cb_Auto2_i(Fl_Menu_*, void*) {
  auto_adjust_selected_cb();
}
void flphoto::cb_Auto2(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Auto2_i(o,v);
}

void flphoto::cb_Brightness1_i(Fl_Menu_*, void*) {
  adjust_levels_selected_cb();
}
void flphoto::cb_Brightness1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Brightness1_i(o,v);
}

void flphoto::cb_Blur1_i(Fl_Menu_*, void*) {
  blur_selected_cb();
}
void flphoto::cb_Blur1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Blur1_i(o,v);
}

void flphoto::cb_Sharp1_i(Fl_Menu_*, void*) {
  sharpen_selected_cb();
}
void flphoto::cb_Sharp1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Sharp1_i(o,v);
}

void flphoto::cb_Crop1_i(Fl_Menu_*, void*) {
  crop_selected_cb();
}
void flphoto::cb_Crop1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Crop1_i(o,v);
}

void flphoto::cb_Rotate2_i(Fl_Menu_*, void*) {
  rotate_selected_cb(90);
}
void flphoto::cb_Rotate2(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Rotate2_i(o,v);
}

void flphoto::cb_Rotate3_i(Fl_Menu_*, void*) {
  rotate_selected_cb(270);
}
void flphoto::cb_Rotate3(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Rotate3_i(o,v);
}

void flphoto::cb_Scale1_i(Fl_Menu_*, void*) {
  scale_selected_cb();
}
void flphoto::cb_Scale1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Scale1_i(o,v);
}

Fl_Menu_Item flphoto::menu_context_menu_[] = {
 {_("&Edit Selected..."), 0x80065,  (Fl_Callback*)flphoto::cb_Edit1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Save Selected"), 0xc0073,  (Fl_Callback*)flphoto::cb_Save4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Print Selected..."), 0xc0070,  (Fl_Callback*)flphoto::cb_Print2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Select &All"), 0xc0061,  (Fl_Callback*)flphoto::cb_Select, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Select &None"), 0xd0061,  (Fl_Callback*)flphoto::cb_Select1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Remove Selected"), 0x8ffff,  (Fl_Callback*)flphoto::cb_Remove1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Pur&ge Selected"), 0,  (Fl_Callback*)flphoto::cb_Pur1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Re&vert Selected"), 0x8007a,  (Fl_Callback*)flphoto::cb_Re1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Touch-Up Selected"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Auto Adjust"), 0,  (Fl_Callback*)flphoto::cb_Auto2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Brightness + &Contrast..."), 0,  (Fl_Callback*)flphoto::cb_Brightness1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Blur..."), 0,  (Fl_Callback*)flphoto::cb_Blur1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Sharp&en..."), 0,  (Fl_Callback*)flphoto::cb_Sharp1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Tra&nsform Selected"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Crop"), 0,  (Fl_Callback*)flphoto::cb_Crop1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Rotate Counter-Clockwise"), 0x8002c,  (Fl_Callback*)flphoto::cb_Rotate2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Rotate Clockwise"), 0x8002e,  (Fl_Callback*)flphoto::cb_Rotate3, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Scale..."), 0,  (Fl_Callback*)flphoto::cb_Scale1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_browser__i(Fl_Image_Browser*, void*) {
  browser_cb();
}
void flphoto::cb_browser_(Fl_Image_Browser* o, void* v) {
  ((flphoto*)(o->parent()->user_data()))->cb_browser__i(o,v);
}

void flphoto::cb_camera_window__i(Fl_Double_Window*, void*) {
  camera_close_cb();
}
void flphoto::cb_camera_window_(Fl_Double_Window* o, void* v) {
  ((flphoto*)(o->user_data()))->cb_camera_window__i(o,v);
}

void flphoto::cb_camera_chooser__i(Fl_Choice*, void*) {
  camera_chooser_cb();
}
void flphoto::cb_camera_chooser_(Fl_Choice* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_camera_chooser__i(o,v);
}

void flphoto::cb_camera_browser__i(Fl_Image_Browser*, void*) {
  camera_browser_cb();
}
void flphoto::cb_camera_browser_(Fl_Image_Browser* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_camera_browser__i(o,v);
}

void flphoto::cb_camera_download_field__i(Fl_Input*, void*) {
  camera_directory_cb();
}
void flphoto::cb_camera_download_field_(Fl_Input* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_camera_download_field__i(o,v);
}

void flphoto::cb__i(Fl_Button*, void*) {
  camera_directory_cb(1);
}
void flphoto::cb_(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void flphoto::cb_camera_select_menu__i(Fl_Menu_Button*, void*) {
  camera_select_cb();
}
void flphoto::cb_camera_select_menu_(Fl_Menu_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_camera_select_menu__i(o,v);
}

void flphoto::cb_New1_i(Fl_Menu_*, void*) {
  camera_select_new();
}
void flphoto::cb_New1(Fl_Menu_* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_New1_i(o,v);
}

Fl_Menu_Item flphoto::menu_camera_select_menu_[] = {
 {_("&All"), 0x40061,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&None"), 0x50061,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("New &Images"), 0x4006e,  (Fl_Callback*)flphoto::cb_New1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_Download1_i(Fl_Button*, void*) {
  camera_download_cb();
}
void flphoto::cb_Download1(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_Download1_i(o,v);
}

void flphoto::cb_Delete_i(Fl_Button*, void*) {
  camera_delete_cb();
}
void flphoto::cb_Delete(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_Delete_i(o,v);
}

void flphoto::cb_camera_close_button__i(Fl_Button*, void*) {
  camera_close_cb();
}
void flphoto::cb_camera_close_button_(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_camera_close_button__i(o,v);
}

void flphoto::cb_crop_top_value__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_top_value_);
}
void flphoto::cb_crop_top_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_top_value__i(o,v);
}

void flphoto::cb_crop_preview_box__i(Fl_Positioner*, void*) {
  crop_update_cb(crop_preview_box_);
}
void flphoto::cb_crop_preview_box_(Fl_Positioner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_preview_box__i(o,v);
}

void flphoto::cb_crop_left_value__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_left_value_);
}
void flphoto::cb_crop_left_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_left_value__i(o,v);
}

void flphoto::cb_crop_right_value__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_right_value_);
}
void flphoto::cb_crop_right_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_right_value__i(o,v);
}

void flphoto::cb_crop_bottom_value__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_bottom_value_);
}
void flphoto::cb_crop_bottom_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_bottom_value__i(o,v);
}

void flphoto::cb_crop_aspect_chooser__i(Fl_Choice*, void*) {
  crop_update_cb(crop_aspect_chooser_);
}
void flphoto::cb_crop_aspect_chooser_(Fl_Choice* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_crop_aspect_chooser__i(o,v);
}

Fl_Menu_Item flphoto::menu_crop_aspect_chooser_[] = {
 {_("None"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Current Image"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Custom"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("3:4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("3:5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("4:3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("4:6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("5:7"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("6:4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("7:5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("8:10"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("9:12"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("9:16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("10:8"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("10:16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("11:14"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("12:9"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("12:18"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("14:11"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("16:9"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("16:10"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_crop_aspect_x__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_aspect_x_);
}
void flphoto::cb_crop_aspect_x_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_crop_aspect_x__i(o,v);
}

void flphoto::cb_crop_aspect_y__i(Fl_Spinner*, void*) {
  crop_update_cb(crop_aspect_y_);
}
void flphoto::cb_crop_aspect_y_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_crop_aspect_y__i(o,v);
}

void flphoto::cb_Crop2_i(Fl_Button*, void*) {
  crop_ok_cb();
}
void flphoto::cb_Crop2(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Crop2_i(o,v);
}

void flphoto::cb_Cancel_i(Fl_Button*, void*) {
  crop_window_->hide();
if (crop_image_)
{
  crop_image_->release();
  crop_image_ = 0;
}
if (crop_data_)
{
  delete[] crop_data_;
  crop_data_ = 0;
};
}
void flphoto::cb_Cancel(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void flphoto::cb_scale_xsize_value__i(Fl_Spinner*, void*) {
  scale_update_cb(scale_xsize_value_);
}
void flphoto::cb_scale_xsize_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_scale_xsize_value__i(o,v);
}

void flphoto::cb_scale_ysize_value__i(Fl_Spinner*, void*) {
  scale_update_cb(scale_ysize_value_);
}
void flphoto::cb_scale_ysize_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_scale_ysize_value__i(o,v);
}

void flphoto::cb_scale_xratio_value__i(Fl_Spinner*, void*) {
  scale_update_cb(scale_xratio_value_);
}
void flphoto::cb_scale_xratio_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_scale_xratio_value__i(o,v);
}

void flphoto::cb_scale_yratio_value__i(Fl_Spinner*, void*) {
  scale_update_cb(scale_yratio_value_);
}
void flphoto::cb_scale_yratio_value_(Fl_Spinner* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_scale_yratio_value__i(o,v);
}

void flphoto::cb_scale_aspect_button__i(Fl_Check_Button*, void*) {
  scale_update_cb(scale_aspect_button_);
}
void flphoto::cb_scale_aspect_button_(Fl_Check_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_scale_aspect_button__i(o,v);
}

void flphoto::cb_Scale2_i(Fl_Button*, void*) {
  scale_ok_cb();
}
void flphoto::cb_Scale2(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Scale2_i(o,v);
}

void flphoto::cb_Cancel1_i(Fl_Button*, void*) {
  scale_window_->hide();
}
void flphoto::cb_Cancel1(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void flphoto::cb_Save5_i(Fl_Button*, void*) {
  jpeg_window_->hide();
}
void flphoto::cb_Save5(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Save5_i(o,v);
}

void flphoto::cb_Save6_i(Fl_Button*, void*) {
  props_ok_cb();
}
void flphoto::cb_Save6(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Save6_i(o,v);
}

void flphoto::cb_Cancel2_i(Fl_Button*, void*) {
  props_window_->hide();
}
void flphoto::cb_Cancel2(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel2_i(o,v);
}

void flphoto::cb_1_i(Fl_Button*, void*) {
  const char *f = fl_dir_chooser(_("Export Directory?"), export_path_field_->value());
if (f)
  export_path_field_->value(f);
}
void flphoto::cb_1(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void flphoto::cb_2_i(Fl_Button*, void*) {
  const char *f = fl_file_chooser(_("Stylesheet File?"), _("CSS Files (*.css)"), export_style_field_->value());
if (f)
  export_style_field_->value(f);
}
void flphoto::cb_2(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

Fl_Menu_Item flphoto::menu_export_typeface_chooser_[] = {
 {_("Helvetica"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Times"), 0,  0, 0, 0, FL_NORMAL_LABEL, 8, 14, 0},
 {_("Courier"), 0,  0, 0, 0, FL_NORMAL_LABEL, 4, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item flphoto::menu_export_fontstyle_chooser_[] = {
 {_("Normal"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Bold"), 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {_("Italic"), 0,  0, 0, 0, FL_NORMAL_LABEL, 2, 14, 0},
 {_("Bold-Italic"), 0,  0, 0, 0, FL_NORMAL_LABEL, 3, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item flphoto::menu_export_position_chooser_[] = {
 {_("Center"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Top"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Bottom"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Top + Bottom"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Left"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Right"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Left + Right"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("All"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_Export_i(Fl_Button*, void*) {
  export_html_ok_cb();
}
void flphoto::cb_Export(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_Export_i(o,v);
}

void flphoto::cb_Cancel3_i(Fl_Button*, void*) {
  export_html_window_->hide();
}
void flphoto::cb_Cancel3(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_Cancel3_i(o,v);
}

void flphoto::cb_auth_window__i(Fl_Double_Window*, void*) {
  auth_user_field_->value("");
auth_pass_field_->value("");
}
void flphoto::cb_auth_window_(Fl_Double_Window* o, void* v) {
  ((flphoto*)(o->user_data()))->cb_auth_window__i(o,v);
}

void flphoto::cb_auth_user_field__i(Fl_Input*, void*) {
  auth_pass_field_->take_focus();
}
void flphoto::cb_auth_user_field_(Fl_Input* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_auth_user_field__i(o,v);
}

void flphoto::cb_auth_pass_field__i(Fl_Input*, void*) {
  auth_window_->hide();
}
void flphoto::cb_auth_pass_field_(Fl_Input* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_auth_pass_field__i(o,v);
}

void flphoto::cb_Login_i(Fl_Button*, void*) {
  auth_window_->hide();
}
void flphoto::cb_Login(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Login_i(o,v);
}

void flphoto::cb_Cancel4_i(Fl_Button*, void*) {
  auth_user_field_->value("");
auth_pass_field_->value("");
auth_window_->hide();
}
void flphoto::cb_Cancel4(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel4_i(o,v);
}

void flphoto::cb_3_i(Fl_Button*, void*) {
  const char *f = fl_file_chooser(_("Stylesheet File?"), _("CSS Files (*.css)"), image_editor_field_->value());
if (f)
  image_editor_field_->value(f);
}
void flphoto::cb_3(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void flphoto::cb_gamma_slider__i(Fl_Value_Slider*, void*) {
  gamma_slider_cb();
}
void flphoto::cb_gamma_slider_(Fl_Value_Slider* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_gamma_slider__i(o,v);
}

Fl_Menu_Item flphoto::menu_ssoptions_screen_chooser_[] = {
 {_("Current"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_ssoptions_size_chooser__i(Fl_Choice*, void*) {
  if (ssoptions_size_chooser_->value())
  ssoptions_custom_group_->activate();
else
  ssoptions_custom_group_->deactivate();
}
void flphoto::cb_ssoptions_size_chooser_(Fl_Choice* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ssoptions_size_chooser__i(o,v);
}

Fl_Menu_Item flphoto::menu_ssoptions_size_chooser_[] = {
 {_("Use Screen Size"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Use Custom Size"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flphoto::cb_4_i(Fl_Button*, void*) {
  const char *d = fl_dir_chooser(_("Memory Card Directory?"), flash_dir_field_->value());
if (d)
  flash_dir_field_->value(d);
}
void flphoto::cb_4(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void flphoto::cb_Save7_i(Fl_Button*, void*) {
  options_ok_cb();
}
void flphoto::cb_Save7(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Save7_i(o,v);
}

void flphoto::cb_Cancel5_i(Fl_Button*, void*) {
  options_window_->hide();
}
void flphoto::cb_Cancel5(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel5_i(o,v);
}

void flphoto::cb_5_i(Fl_Button*, void*) {
  const char *dir = fl_dir_chooser("Export To?", directory_field_->value());

if (dir)
  directory_field_->value(dir);
}
void flphoto::cb_5(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

void flphoto::cb_Export1_i(Fl_Button*, void*) {
  export_dir_ok_cb();
}
void flphoto::cb_Export1(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Export1_i(o,v);
}

void flphoto::cb_Cancel6_i(Fl_Button*, void*) {
  directory_window_->hide();
}
void flphoto::cb_Cancel6(Fl_Button* o, void* v) {
  ((flphoto*)(o->parent()->parent()->user_data()))->cb_Cancel6_i(o,v);
}

void flphoto::camera_browser_cb() {
  if (Fl::event_clicks())
  camera_download_cb();
}

void flphoto::camera_select_cb() {
  int i;
int m = !camera_select_menu_->value();

for (i = 0; i < camera_browser_->count(); i ++)
  camera_browser_->value(i)->selected = m;
camera_browser_->redraw();
}

flphoto::flphoto(const char *filename ) {
  { window_ = new Fl_Double_Window(620, 625);
    window_->callback((Fl_Callback*)cb_window_, (void*)(this));
    { menubar_ = new Fl_Menu_Bar(0, 0, 620, 25);
      menubar_->box(FL_THIN_UP_BOX);
      menubar_->menu(menu_menubar_);
    } // Fl_Menu_Bar* menubar_
    { Fl_Group* o = new Fl_Group(0, 25, 620, 25);
      { mode_button_[0] = new Fl_Button(0, 25, 25, 25);
        mode_button_[0]->tooltip(_("Pan Image (P)"));
        mode_button_[0]->type(102);
        mode_button_[0]->box(FL_THIN_UP_BOX);
        mode_button_[0]->down_box(FL_THIN_DOWN_BOX);
        mode_button_[0]->value(1);
        mode_button_[0]->shortcut(0x70);
        mode_button_[0]->selection_color(FL_SELECTION_COLOR);
        mode_button_[0]->image(image_pan);
        mode_button_[0]->callback((Fl_Callback*)cb_mode_button_);
      } // Fl_Button* mode_button_[0]
      { mode_button_[1] = new Fl_Button(25, 25, 25, 25);
        mode_button_[1]->tooltip(_("Zoom In (Z)"));
        mode_button_[1]->type(102);
        mode_button_[1]->box(FL_THIN_UP_BOX);
        mode_button_[1]->down_box(FL_THIN_DOWN_BOX);
        mode_button_[1]->shortcut(0x7a);
        mode_button_[1]->selection_color(FL_SELECTION_COLOR);
        mode_button_[1]->image(image_zoom_in);
        mode_button_[1]->callback((Fl_Callback*)cb_mode_button_1);
      } // Fl_Button* mode_button_[1]
      { mode_button_[2] = new Fl_Button(50, 25, 25, 25);
        mode_button_[2]->tooltip(_("Zoom Out (Shift+Z)"));
        mode_button_[2]->type(102);
        mode_button_[2]->box(FL_THIN_UP_BOX);
        mode_button_[2]->down_box(FL_THIN_DOWN_BOX);
        mode_button_[2]->shortcut(0x1007a);
        mode_button_[2]->selection_color(FL_SELECTION_COLOR);
        mode_button_[2]->image(image_zoom_out);
        mode_button_[2]->callback((Fl_Callback*)cb_mode_button_2);
      } // Fl_Button* mode_button_[2]
      { mode_button_[3] = new Fl_Button(75, 25, 25, 25);
        mode_button_[3]->tooltip(_("Remove Red-Eye (R)"));
        mode_button_[3]->type(102);
        mode_button_[3]->box(FL_THIN_UP_BOX);
        mode_button_[3]->down_box(FL_THIN_DOWN_BOX);
        mode_button_[3]->shortcut(0x72);
        mode_button_[3]->selection_color(FL_SELECTION_COLOR);
        mode_button_[3]->image(image_redeye);
        mode_button_[3]->callback((Fl_Callback*)cb_mode_button_3);
      } // Fl_Button* mode_button_[3]
      { Fl_Box* o = new Fl_Box(595, 25, 25, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { albums_ = new Fl_Select_Browser(0, 50, 150, 420);
    	albums_->callback((Fl_Callback*)cb_albums_);
    	albums_->end();
    	Fl_Group::current()->resizable(albums_);
    } // Fl_Select_Browser* albums_
    { display_ = new Fl_Image_Display(150, 50, 470, 420);
      display_->box(FL_DOWN_BOX);
      display_->color(FL_LIGHT3);
      display_->selection_color(FL_BACKGROUND_COLOR);
      display_->labeltype(FL_NORMAL_LABEL);
      display_->labelfont(0);
      display_->labelsize(14);
      display_->labelcolor(FL_FOREGROUND_COLOR);
      display_->callback((Fl_Callback*)cb_display_);
      display_->align(FL_ALIGN_TOP);
      display_->when(FL_WHEN_RELEASE);
      display_->end();
      Fl_Group::current()->resizable(display_);
    } // Fl_Image_Display* display_
    { Fl_Group* o = new Fl_Group(0, 470, 620, 25);
      { context_menu_ = new Fl_Menu_Button(0, 470, 185, 25, _(" Selected Images"));
        context_menu_->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        context_menu_->menu(menu_context_menu_);
      } // Fl_Menu_Button* context_menu_
      { stats_box_ = new Fl_Box(185, 470, 435, 25, _("0 image(s), 0.0MB"));
        stats_box_->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        Fl_Group::current()->resizable(stats_box_);
      } // Fl_Box* stats_box_
      o->end();
    } // Fl_Group* o
    { browser_ = new Fl_Image_Browser(0, 495, 620, 130);
      browser_->box(FL_DOWN_BOX);
      browser_->color(FL_LIGHT3);
      browser_->selection_color(FL_SELECTION_COLOR);
      browser_->labeltype(FL_NORMAL_LABEL);
      browser_->labelfont(1);
      browser_->labelsize(14);
      browser_->labelcolor(FL_FOREGROUND_COLOR);
      browser_->callback((Fl_Callback*)cb_browser_);
      browser_->align(FL_ALIGN_TOP_LEFT);
      browser_->when(FL_WHEN_RELEASE);
      browser_->end();
    } // Fl_Image_Browser* browser_
    window_->end();
  } // Fl_Double_Window* window_
  { camera_window_ = new Fl_Double_Window(660, 305, _("Import from Camera"));
    camera_window_->callback((Fl_Callback*)cb_camera_window_, (void*)(this));
    { camera_group_ = new Fl_Group(0, 0, 650, 310);
      { camera_chooser_ = new Fl_Choice(230, 10, 225, 25, _("Camera:"));
        camera_chooser_->down_box(FL_BORDER_BOX);
        camera_chooser_->labelfont(1);
        camera_chooser_->callback((Fl_Callback*)cb_camera_chooser_);
      } // Fl_Choice* camera_chooser_
      { Fl_Group* o = new Fl_Group(10, 45, 640, 215);
        o->box(FL_THIN_DOWN_BOX);
        o->color((Fl_Color)48);
        { camera_browser_ = new Fl_Image_Browser(20, 70, 620, 130, _("Images:"));
          camera_browser_->box(FL_DOWN_BOX);
          camera_browser_->color(FL_BACKGROUND2_COLOR);
          camera_browser_->selection_color(FL_SELECTION_COLOR);
          camera_browser_->labeltype(FL_NORMAL_LABEL);
          camera_browser_->labelfont(1);
          camera_browser_->labelsize(14);
          camera_browser_->labelcolor(FL_FOREGROUND_COLOR);
          camera_browser_->callback((Fl_Callback*)cb_camera_browser_);
          camera_browser_->align(FL_ALIGN_TOP_LEFT);
          camera_browser_->when(FL_WHEN_RELEASE);
          camera_browser_->end();
        } // Fl_Image_Browser* camera_browser_
        { Fl_Group* o = new Fl_Group(20, 225, 620, 25);
          { camera_download_field_ = new Fl_Input(20, 225, 595, 25, _("Download Directory:"));
            camera_download_field_->labelfont(1);
            camera_download_field_->textfont(4);
            camera_download_field_->callback((Fl_Callback*)cb_camera_download_field_);
            camera_download_field_->align(FL_ALIGN_TOP_LEFT);
            camera_download_field_->when(FL_WHEN_CHANGED);
            Fl_Group::current()->resizable(camera_download_field_);
          } // Fl_Input* camera_download_field_
          { Fl_Button* o = new Fl_Button(615, 225, 25, 25, _("..."));
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(10, 270, 555, 25);
        { Fl_Box* o = new Fl_Box(10, 270, 200, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { camera_select_menu_ = new Fl_Menu_Button(245, 270, 120, 25, _("Select    "));
          camera_select_menu_->callback((Fl_Callback*)cb_camera_select_menu_);
          camera_select_menu_->menu(menu_camera_select_menu_);
        } // Fl_Menu_Button* camera_select_menu_
        { Fl_Button* o = new Fl_Button(375, 270, 100, 25, _("Download"));
          o->callback((Fl_Callback*)cb_Download1);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(485, 270, 80, 25, _("Delete"));
          o->callback((Fl_Callback*)cb_Delete);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      camera_group_->end();
    } // Fl_Group* camera_group_
    { Fl_Group* o = new Fl_Group(10, 270, 640, 25);
      { camera_progress_ = new Fl_Progress(10, 270, 225, 25);
        camera_progress_->selection_color((Fl_Color)4);
        camera_progress_->hide();
      } // Fl_Progress* camera_progress_
      { camera_close_button_ = new Fl_Button(575, 270, 75, 25, _("Close"));
        camera_close_button_->callback((Fl_Callback*)cb_camera_close_button_);
      } // Fl_Button* camera_close_button_
      o->end();
    } // Fl_Group* o
    camera_window_->end();
    camera_window_->resizable(camera_window_);
  } // Fl_Double_Window* camera_window_
  { crop_window_ = new Fl_Double_Window(335, 440, _("Crop"));
    crop_window_->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 10, 315, 385);
      o->box(FL_THIN_DOWN_BOX);
      o->color((Fl_Color)48);
      { crop_dimensions_box_ = new Fl_Box(80, 20, 175, 25, _("%d x %d pixels"));
      } // Fl_Box* crop_dimensions_box_
      { crop_top_value_ = new Fl_Spinner(140, 65, 55, 25, _("Top"));
        crop_top_value_->labelfont(1);
        crop_top_value_->minimum(0);
        crop_top_value_->maximum(99999);
        crop_top_value_->value(1);
        crop_top_value_->callback((Fl_Callback*)cb_crop_top_value_);
        crop_top_value_->align(FL_ALIGN_TOP);
      } // Fl_Spinner* crop_top_value_
      { crop_preview_box_ = new Fl_Positioner(80, 95, 175, 175);
        crop_preview_box_->box(FL_DOWN_BOX);
        crop_preview_box_->color(FL_BACKGROUND2_COLOR);
        crop_preview_box_->selection_color(FL_BACKGROUND_COLOR);
        crop_preview_box_->labeltype(FL_NORMAL_LABEL);
        crop_preview_box_->labelfont(0);
        crop_preview_box_->labelsize(14);
        crop_preview_box_->labelcolor(FL_FOREGROUND_COLOR);
        crop_preview_box_->callback((Fl_Callback*)cb_crop_preview_box_);
        crop_preview_box_->align(FL_ALIGN_CENTER);
        crop_preview_box_->when(3);
        crop_preview_box_->align(FL_ALIGN_INSIDE);
      } // Fl_Positioner* crop_preview_box_
      { crop_left_value_ = new Fl_Spinner(20, 170, 55, 25, _("Left"));
        crop_left_value_->labelfont(1);
        crop_left_value_->minimum(0);
        crop_left_value_->maximum(99999);
        crop_left_value_->value(1);
        crop_left_value_->callback((Fl_Callback*)cb_crop_left_value_);
        crop_left_value_->align(FL_ALIGN_TOP);
      } // Fl_Spinner* crop_left_value_
      { crop_right_value_ = new Fl_Spinner(260, 170, 55, 25, _("Right"));
        crop_right_value_->labelfont(1);
        crop_right_value_->minimum(0);
        crop_right_value_->maximum(99999);
        crop_right_value_->value(1);
        crop_right_value_->callback((Fl_Callback*)cb_crop_right_value_);
        crop_right_value_->align(FL_ALIGN_TOP);
      } // Fl_Spinner* crop_right_value_
      { crop_bottom_value_ = new Fl_Spinner(135, 275, 55, 25, _("Bottom"));
        crop_bottom_value_->labelfont(1);
        crop_bottom_value_->minimum(0);
        crop_bottom_value_->maximum(99999);
        crop_bottom_value_->value(1);
        crop_bottom_value_->callback((Fl_Callback*)cb_crop_bottom_value_);
        crop_bottom_value_->align(FL_ALIGN_BOTTOM);
      } // Fl_Spinner* crop_bottom_value_
      { crop_aspect_chooser_ = new Fl_Choice(140, 325, 175, 25, _("Constrain: "));
        crop_aspect_chooser_->down_box(FL_BORDER_BOX);
        crop_aspect_chooser_->labelfont(1);
        crop_aspect_chooser_->callback((Fl_Callback*)cb_crop_aspect_chooser_);
        crop_aspect_chooser_->menu(menu_crop_aspect_chooser_);
      } // Fl_Choice* crop_aspect_chooser_
      { crop_aspect_custom_ = new Fl_Group(205, 360, 110, 25);
        crop_aspect_custom_->deactivate();
        { crop_aspect_x_ = new Fl_Spinner(215, 360, 45, 25, _("Custom: "));
          crop_aspect_x_->maximum(1000);
          crop_aspect_x_->value(1);
          crop_aspect_x_->callback((Fl_Callback*)cb_crop_aspect_x_);
        } // Fl_Spinner* crop_aspect_x_
        { crop_aspect_y_ = new Fl_Spinner(270, 360, 45, 25, _(":"));
          crop_aspect_y_->maximum(1000);
          crop_aspect_y_->value(1);
          crop_aspect_y_->callback((Fl_Callback*)cb_crop_aspect_y_);
        } // Fl_Spinner* crop_aspect_y_
        crop_aspect_custom_->end();
      } // Fl_Group* crop_aspect_custom_
      o->end();
    } // Fl_Group* o
    { SmartGroup* o = new SmartGroup(10, 405, 315, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(135, 405, 90, 25, _("Crop"));
        o->box(FL_UP_BOX);
        o->shortcut(0xff0d);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Crop2);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 405, 90, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->end();
    } // SmartGroup* o
    crop_window_->set_modal();
    crop_window_->end();
  } // Fl_Double_Window* crop_window_
  { scale_window_ = new Fl_Double_Window(305, 165, _("Scale"));
    scale_window_->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 10, 285, 110);
      o->box(FL_THIN_DOWN_BOX);
      o->color((Fl_Color)48);
      { scale_xsize_value_ = new Fl_Spinner(90, 20, 55, 25, _("Width: "));
        scale_xsize_value_->labelfont(1);
        scale_xsize_value_->value(1);
        scale_xsize_value_->callback((Fl_Callback*)cb_scale_xsize_value_);
      } // Fl_Spinner* scale_xsize_value_
      { scale_ysize_value_ = new Fl_Spinner(230, 20, 55, 25, _("Height: "));
        scale_ysize_value_->labelfont(1);
        scale_ysize_value_->value(1);
        scale_ysize_value_->callback((Fl_Callback*)cb_scale_ysize_value_);
      } // Fl_Spinner* scale_ysize_value_
      { scale_xratio_value_ = new Fl_Spinner(90, 50, 55, 25, _("Scale: "));
        scale_xratio_value_->labelfont(1);
        scale_xratio_value_->minimum(0.01);
        scale_xratio_value_->maximum(10);
        scale_xratio_value_->step(0.01);
        scale_xratio_value_->value(1);
        scale_xratio_value_->callback((Fl_Callback*)cb_scale_xratio_value_);
      } // Fl_Spinner* scale_xratio_value_
      { scale_yratio_value_ = new Fl_Spinner(230, 50, 55, 25, _("Scale: "));
        scale_yratio_value_->labelfont(1);
        scale_yratio_value_->minimum(0.01);
        scale_yratio_value_->maximum(10);
        scale_yratio_value_->step(0.01);
        scale_yratio_value_->value(1);
        scale_yratio_value_->callback((Fl_Callback*)cb_scale_yratio_value_);
      } // Fl_Spinner* scale_yratio_value_
      { scale_aspect_button_ = new Fl_Check_Button(20, 85, 265, 25, _("Keep Original Aspect"));
        scale_aspect_button_->down_box(FL_DOWN_BOX);
        scale_aspect_button_->value(1);
        scale_aspect_button_->callback((Fl_Callback*)cb_scale_aspect_button_);
      } // Fl_Check_Button* scale_aspect_button_
      o->end();
    } // Fl_Group* o
    { SmartGroup* o = new SmartGroup(10, 130, 285, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(110, 130, 85, 25, _("Scale"));
        o->box(FL_UP_BOX);
        o->shortcut(0xff0d);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Scale2);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 130, 90, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel1);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->end();
    } // SmartGroup* o
    scale_window_->set_modal();
    scale_window_->end();
  } // Fl_Double_Window* scale_window_
  { jpeg_window_ = new Fl_Double_Window(310, 270, _("JPEG Parameters"));
    jpeg_window_->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 10, 290, 215);
      o->box(FL_THIN_DOWN_BOX);
      o->color((Fl_Color)48);
      { jpeg_transform_box_ = new Fl_Box(20, 20, 270, 90, _("This JPEG image will be saved using the original compressed image data, so no\
 image degradation will occur."));
        jpeg_transform_box_->box(FL_DOWN_BOX);
        jpeg_transform_box_->align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE);
        jpeg_transform_box_->hide();
      } // Fl_Box* jpeg_transform_box_
      { jpeg_quality_group_ = new Fl_Group(20, 25, 270, 65);
        { Fl_Group* o = new Fl_Group(95, 25, 195, 65, _("Quality:"));
          o->labelfont(1);
          o->align(FL_ALIGN_LEFT);
          { Fl_Box* o = new Fl_Box(130, 25, 75, 20, _("low"));
            o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(205, 25, 85, 20, _("high"));
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { jpeg_quality_value_ = new Fl_Value_Slider(95, 45, 195, 25);
            jpeg_quality_value_->type(5);
            jpeg_quality_value_->labelfont(1);
            jpeg_quality_value_->minimum(1);
            jpeg_quality_value_->maximum(100);
            jpeg_quality_value_->step(1);
            jpeg_quality_value_->value(75);
            jpeg_quality_value_->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* jpeg_quality_value_
          { Fl_Box* o = new Fl_Box(130, 70, 75, 20, _("small"));
            o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(205, 70, 85, 20, _("large"));
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        jpeg_quality_group_->end();
      } // Fl_Group* jpeg_quality_group_
      { Fl_Group* o = new Fl_Group(95, 115, 195, 100, _("Options:"));
        o->labelfont(1);
        o->align(FL_ALIGN_LEFT);
        { jpeg_progressive_button_ = new Fl_Check_Button(95, 115, 195, 25, _("Progressive Display"));
          jpeg_progressive_button_->down_box(FL_DOWN_BOX);
          jpeg_progressive_button_->value(1);
        } // Fl_Check_Button* jpeg_progressive_button_
        { jpeg_optimize_button_ = new Fl_Check_Button(95, 140, 195, 25, _("Optimize for Size"));
          jpeg_optimize_button_->down_box(FL_DOWN_BOX);
          jpeg_optimize_button_->value(1);
        } // Fl_Check_Button* jpeg_optimize_button_
        { jpeg_comments_button_ = new Fl_Check_Button(95, 165, 195, 25, _("Include Comments"));
          jpeg_comments_button_->down_box(FL_DOWN_BOX);
          jpeg_comments_button_->value(1);
        } // Fl_Check_Button* jpeg_comments_button_
        { jpeg_exif_button_ = new Fl_Check_Button(95, 190, 195, 25, _("Include EXIF Data"));
          jpeg_exif_button_->down_box(FL_DOWN_BOX);
          jpeg_exif_button_->value(1);
        } // Fl_Check_Button* jpeg_exif_button_
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { SmartGroup* o = new SmartGroup(10, 235, 290, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(210, 235, 90, 25, _("Save"));
        o->box(FL_UP_BOX);
        o->shortcut(0xff0d);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Save5);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->end();
    } // SmartGroup* o
    jpeg_window_->set_modal();
    jpeg_window_->end();
  } // Fl_Double_Window* jpeg_window_
  { props_window_ = new Fl_Double_Window(305, 330, _("Properties"));
    props_window_->user_data((void*)(this));
    { props_comments_field_ = new Fl_Input(10, 25, 285, 110, _("Comments:"));
      props_comments_field_->type(4);
      props_comments_field_->labelfont(1);
      props_comments_field_->align(FL_ALIGN_TOP_LEFT);
      props_comments_field_->wrap(1);
      props_comments_field_->maximum_size(1023);
    } // Fl_Input* props_comments_field_
    { SmartGroup* o = new SmartGroup(10, 295, 285, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(95, 295, 75, 25, _("Save"));
        o->callback((Fl_Callback*)cb_Save6);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(180, 295, 115, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel2);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->end();
    } // SmartGroup* o
    { props_exif_field_ = new Fl_Output(10, 165, 285, 120, _("EXIF Information:"));
      props_exif_field_->type(12);
      props_exif_field_->color(FL_BACKGROUND_COLOR);
      props_exif_field_->labelfont(1);
      props_exif_field_->align(FL_ALIGN_TOP_LEFT);
      props_exif_field_->wrap(1);
    } // Fl_Output* props_exif_field_
    props_window_->set_modal();
    props_window_->end();
  } // Fl_Double_Window* props_window_
  { export_html_window_ = new SpringWindow(555, 285, _("Export HTML"));
    export_html_window_->box(FL_FLAT_BOX);
    export_html_window_->color(FL_BACKGROUND_COLOR);
    export_html_window_->selection_color(FL_BACKGROUND_COLOR);
    export_html_window_->labeltype(FL_NO_LABEL);
    export_html_window_->labelfont(0);
    export_html_window_->labelsize(14);
    export_html_window_->labelcolor(FL_FOREGROUND_COLOR);
    export_html_window_->user_data((void*)(this));
    export_html_window_->align(FL_ALIGN_TOP);
    export_html_window_->when(FL_WHEN_RELEASE);
    { export_group_ = new Fl_Group(0, 0, 555, 285);
      export_group_->box(FL_FLAT_BOX);
      { export_tabs_ = new MenuTabs(10, 10, 535, 230);
        export_tabs_->box(FL_THIN_DOWN_BOX);
        export_tabs_->color((Fl_Color)48);
        export_tabs_->selection_color(FL_BACKGROUND_COLOR);
        export_tabs_->labeltype(FL_NORMAL_LABEL);
        export_tabs_->labelfont(0);
        export_tabs_->labelsize(14);
        export_tabs_->labelcolor(FL_FOREGROUND_COLOR);
        export_tabs_->align(FL_ALIGN_TOP);
        export_tabs_->when(FL_WHEN_RELEASE);
        { export_general_tab_ = new SmartGroup(10, 35, 485, 185, _("General"));
          export_general_tab_->box(FL_NO_BOX);
          export_general_tab_->color(FL_BACKGROUND_COLOR);
          export_general_tab_->selection_color(FL_BACKGROUND_COLOR);
          export_general_tab_->labeltype(FL_NORMAL_LABEL);
          export_general_tab_->labelfont(0);
          export_general_tab_->labelsize(14);
          export_general_tab_->labelcolor(FL_FOREGROUND_COLOR);
          export_general_tab_->align(FL_ALIGN_TOP);
          export_general_tab_->when(FL_WHEN_RELEASE);
          { Fl_Group* o = new Fl_Group(160, 45, 325, 25, _("Export To:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { export_path_field_ = new Fl_Input(160, 45, 300, 25);
              export_path_field_->textfont(4);
            } // Fl_Input* export_path_field_
            { Fl_Button* o = new Fl_Button(460, 45, 25, 25, _("..."));
              o->callback((Fl_Callback*)cb_1);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          { export_header_field_ = new Fl_Input(160, 80, 325, 25, _("Header Text:"));
            export_header_field_->labelfont(1);
          } // Fl_Input* export_header_field_
          { export_footer_field_ = new Fl_Input(160, 115, 325, 25, _("Footer Text:"));
            export_footer_field_->labelfont(1);
          } // Fl_Input* export_footer_field_
          { Fl_Group* o = new Fl_Group(160, 150, 325, 25, _("Stylesheet:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { export_style_field_ = new Fl_Input(160, 150, 300, 25);
              export_style_field_->textfont(4);
            } // Fl_Input* export_style_field_
            { Fl_Button* o = new Fl_Button(460, 150, 25, 25, _("..."));
              o->callback((Fl_Callback*)cb_2);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          { SmartGroup* o = new SmartGroup(160, 185, 325, 25, _("Options:"));
            o->box(FL_NO_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(1);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
            { export_original_button_ = new Fl_Check_Button(160, 185, 174, 25, _("Include Original Images"));
              export_original_button_->down_box(FL_DOWN_BOX);
            } // Fl_Check_Button* export_original_button_
            o->do_layout(FL_ALIGN_LEFT, 0);
            o->end();
          } // SmartGroup* o
          export_general_tab_->do_layout();
          export_general_tab_->end();
        } // SmartGroup* export_general_tab_
        { export_image_tab_ = new SmartGroup(10, 35, 535, 150, _("Images"));
          export_image_tab_->box(FL_NO_BOX);
          export_image_tab_->color(FL_BACKGROUND_COLOR);
          export_image_tab_->selection_color(FL_BACKGROUND_COLOR);
          export_image_tab_->labeltype(FL_NORMAL_LABEL);
          export_image_tab_->labelfont(0);
          export_image_tab_->labelsize(14);
          export_image_tab_->labelcolor(FL_FOREGROUND_COLOR);
          export_image_tab_->align(FL_ALIGN_TOP);
          export_image_tab_->when(FL_WHEN_RELEASE);
          export_image_tab_->hide();
          { export_imagesize_value_ = new Fl_Spinner(160, 45, 60, 25, _("Image Size:"));
            export_imagesize_value_->labelfont(1);
            export_imagesize_value_->minimum(320);
            export_imagesize_value_->maximum(1280);
            export_imagesize_value_->step(10);
            export_imagesize_value_->value(800);
          } // Fl_Spinner* export_imagesize_value_
          { export_imagecols_value_ = new Fl_Spinner(160, 80, 40, 25, _("Columns:"));
            export_imagecols_value_->labelfont(1);
            export_imagecols_value_->maximum(12);
            export_imagecols_value_->value(1);
          } // Fl_Spinner* export_imagecols_value_
          { export_imagerows_value_ = new Fl_Spinner(160, 115, 40, 25, _("Rows:"));
            export_imagerows_value_->labelfont(1);
            export_imagerows_value_->maximum(12);
            export_imagerows_value_->value(1);
          } // Fl_Spinner* export_imagerows_value_
          { export_imagequal_value_ = new Fl_Value_Slider(160, 150, 125, 25, _("Quality:"));
            export_imagequal_value_->type(5);
            export_imagequal_value_->labelfont(1);
            export_imagequal_value_->maximum(100);
            export_imagequal_value_->step(1);
            export_imagequal_value_->value(75);
            export_imagequal_value_->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* export_imagequal_value_
          export_image_tab_->do_layout();
          export_image_tab_->end();
        } // SmartGroup* export_image_tab_
        { export_thumbnail_tab_ = new SmartGroup(10, 35, 535, 150, _("Thumbnails"));
          export_thumbnail_tab_->box(FL_NO_BOX);
          export_thumbnail_tab_->color(FL_BACKGROUND_COLOR);
          export_thumbnail_tab_->selection_color(FL_BACKGROUND_COLOR);
          export_thumbnail_tab_->labeltype(FL_NORMAL_LABEL);
          export_thumbnail_tab_->labelfont(0);
          export_thumbnail_tab_->labelsize(14);
          export_thumbnail_tab_->labelcolor(FL_FOREGROUND_COLOR);
          export_thumbnail_tab_->align(FL_ALIGN_TOP);
          export_thumbnail_tab_->when(FL_WHEN_RELEASE);
          export_thumbnail_tab_->hide();
          { export_thumbsize_value_ = new Fl_Spinner(160, 45, 60, 25, _("Thumbnail Size:"));
            export_thumbsize_value_->labelfont(1);
            export_thumbsize_value_->minimum(40);
            export_thumbsize_value_->maximum(320);
            export_thumbsize_value_->step(5);
            export_thumbsize_value_->value(80);
          } // Fl_Spinner* export_thumbsize_value_
          { export_thumbcols_value_ = new Fl_Spinner(160, 80, 40, 25, _("Columns:"));
            export_thumbcols_value_->labelfont(1);
            export_thumbcols_value_->maximum(12);
            export_thumbcols_value_->value(5);
          } // Fl_Spinner* export_thumbcols_value_
          { export_thumbrows_value_ = new Fl_Spinner(160, 115, 40, 25, _("Rows:"));
            export_thumbrows_value_->labelfont(1);
            export_thumbrows_value_->maximum(12);
            export_thumbrows_value_->value(5);
          } // Fl_Spinner* export_thumbrows_value_
          { export_thumbqual_value_ = new Fl_Value_Slider(160, 150, 125, 25, _("Quality:"));
            export_thumbqual_value_->type(5);
            export_thumbqual_value_->labelfont(1);
            export_thumbqual_value_->maximum(100);
            export_thumbqual_value_->step(1);
            export_thumbqual_value_->value(50);
            export_thumbqual_value_->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* export_thumbqual_value_
          export_thumbnail_tab_->do_layout();
          export_thumbnail_tab_->end();
        } // SmartGroup* export_thumbnail_tab_
        { export_watermark_tab_ = new SmartGroup(10, 35, 535, 205, _("Watermark"));
          export_watermark_tab_->box(FL_NO_BOX);
          export_watermark_tab_->color(FL_BACKGROUND_COLOR);
          export_watermark_tab_->selection_color(FL_BACKGROUND_COLOR);
          export_watermark_tab_->labeltype(FL_NORMAL_LABEL);
          export_watermark_tab_->labelfont(0);
          export_watermark_tab_->labelsize(14);
          export_watermark_tab_->labelcolor(FL_FOREGROUND_COLOR);
          export_watermark_tab_->align(FL_ALIGN_TOP);
          export_watermark_tab_->when(FL_WHEN_RELEASE);
          export_watermark_tab_->hide();
          { export_watermark_field_ = new Fl_Input(160, 45, 375, 75, _("Watermark Text:"));
            export_watermark_field_->type(4);
            export_watermark_field_->labelfont(1);
          } // Fl_Input* export_watermark_field_
          { Fl_Group* o = new Fl_Group(160, 130, 375, 25, _("Font:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { export_typeface_chooser_ = new Fl_Choice(160, 130, 95, 25);
              export_typeface_chooser_->down_box(FL_BORDER_BOX);
              export_typeface_chooser_->menu(menu_export_typeface_chooser_);
            } // Fl_Choice* export_typeface_chooser_
            { export_fontstyle_chooser_ = new Fl_Choice(265, 130, 105, 25);
              export_fontstyle_chooser_->down_box(FL_BORDER_BOX);
              export_fontstyle_chooser_->labelfont(1);
              export_fontstyle_chooser_->menu(menu_export_fontstyle_chooser_);
            } // Fl_Choice* export_fontstyle_chooser_
            { export_fontsize_slider_ = new Fl_Value_Slider(380, 130, 155, 25);
              export_fontsize_slider_->type(5);
              export_fontsize_slider_->labelfont(1);
              export_fontsize_slider_->minimum(1);
              export_fontsize_slider_->maximum(100);
              export_fontsize_slider_->step(1);
              export_fontsize_slider_->value(10);
              export_fontsize_slider_->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* export_fontsize_slider_
            o->end();
          } // Fl_Group* o
          { export_opacity_slider_ = new Fl_Value_Slider(160, 165, 155, 25, _("Opacity:"));
            export_opacity_slider_->type(5);
            export_opacity_slider_->labelfont(1);
            export_opacity_slider_->maximum(100);
            export_opacity_slider_->step(1);
            export_opacity_slider_->value(30);
            export_opacity_slider_->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* export_opacity_slider_
          { export_position_chooser_ = new Fl_Choice(160, 200, 175, 25, _("Position:"));
            export_position_chooser_->down_box(FL_BORDER_BOX);
            export_position_chooser_->labelfont(1);
            export_position_chooser_->menu(menu_export_position_chooser_);
          } // Fl_Choice* export_position_chooser_
          export_watermark_tab_->do_layout();
          export_watermark_tab_->end();
        } // SmartGroup* export_watermark_tab_
        export_tabs_->auto_resize(true);
        export_tabs_->end();
        Fl_Group::current()->resizable(export_tabs_);
      } // MenuTabs* export_tabs_
      { SmartGroup* o = new SmartGroup(10, 250, 535, 25);
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_RELEASE);
        { Fl_Button* o = new Fl_Button(355, 250, 90, 25, _("Export"));
          o->box(FL_UP_BOX);
          o->shortcut(0xff0d);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->callback((Fl_Callback*)cb_Export);
          o->align(FL_ALIGN_CENTER);
          o->when(FL_WHEN_RELEASE);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(455, 250, 90, 25, _("Cancel"));
          o->callback((Fl_Callback*)cb_Cancel3);
        } // Fl_Button* o
        o->child_align(FL_ALIGN_RIGHT);
        o->do_layout(FL_ALIGN_RIGHT, 0);
        o->end();
      } // SmartGroup* o
      export_group_->end();
      Fl_Group::current()->resizable(export_group_);
    } // Fl_Group* export_group_
    { export_progress_ = new Fl_Progress(10, 250, 310, 25);
      export_progress_->selection_color((Fl_Color)4);
      export_progress_->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
      export_progress_->hide();
    } // Fl_Progress* export_progress_
    export_html_window_->set_modal();
    export_html_window_->end();
  } // SpringWindow* export_html_window_
  { auth_window_ = new Fl_Double_Window(275, 135, _("Password Required"));
    auth_window_->callback((Fl_Callback*)cb_auth_window_, (void*)(this));
    { SmartGroup* o = new SmartGroup(10, 10, 255, 80);
      o->box(FL_THIN_DOWN_BOX);
      o->color((Fl_Color)48);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { auth_user_field_ = new Fl_Input(120, 20, 135, 25, _("Username:"));
        auth_user_field_->labelfont(1);
        auth_user_field_->callback((Fl_Callback*)cb_auth_user_field_);
        auth_user_field_->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* auth_user_field_
      { auth_pass_field_ = new Fl_Input(120, 55, 135, 25, _("Password:"));
        auth_pass_field_->type(5);
        auth_pass_field_->labelfont(1);
        auth_pass_field_->callback((Fl_Callback*)cb_auth_pass_field_);
        auth_pass_field_->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* auth_pass_field_
      o->do_layout(FL_ALIGN_TOP, 10, 10, 10, true);
      o->end();
    } // SmartGroup* o
    { SmartGroup* o = new SmartGroup(10, 100, 255, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(80, 100, 85, 25, _("Login"));
        o->box(FL_UP_BOX);
        o->shortcut(0xff0d);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Login);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(175, 100, 90, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel4);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->end();
    } // SmartGroup* o
    auth_window_->set_modal();
    auth_window_->end();
  } // Fl_Double_Window* auth_window_
  { options_window_ = new SpringWindow(530, 305, _("Options"));
    options_window_->box(FL_FLAT_BOX);
    options_window_->color(FL_BACKGROUND_COLOR);
    options_window_->selection_color(FL_BACKGROUND_COLOR);
    options_window_->labeltype(FL_NO_LABEL);
    options_window_->labelfont(0);
    options_window_->labelsize(14);
    options_window_->labelcolor(FL_FOREGROUND_COLOR);
    options_window_->user_data((void*)(this));
    options_window_->align(FL_ALIGN_TOP);
    options_window_->when(FL_WHEN_RELEASE);
    { options_tabs_ = new MenuTabs(10, 10, 510, 250);
      options_tabs_->box(FL_THIN_DOWN_BOX);
      options_tabs_->color((Fl_Color)48);
      options_tabs_->selection_color(FL_BACKGROUND_COLOR);
      options_tabs_->labeltype(FL_NORMAL_LABEL);
      options_tabs_->labelfont(0);
      options_tabs_->labelsize(14);
      options_tabs_->labelcolor(FL_FOREGROUND_COLOR);
      options_tabs_->align(FL_ALIGN_TOP);
      options_tabs_->when(FL_WHEN_RELEASE);
      { image_tab_ = new SmartGroup(10, 35, 510, 225, _("Image"));
        image_tab_->box(FL_NO_BOX);
        image_tab_->color(FL_BACKGROUND_COLOR);
        image_tab_->selection_color(FL_BACKGROUND_COLOR);
        image_tab_->labeltype(FL_NORMAL_LABEL);
        image_tab_->labelfont(0);
        image_tab_->labelsize(14);
        image_tab_->labelcolor(FL_FOREGROUND_COLOR);
        image_tab_->align(FL_ALIGN_TOP);
        image_tab_->when(FL_WHEN_RELEASE);
        image_tab_->hide();
        { SmartGroup* o = new SmartGroup(150, 45, 360, 25, _("Options:"));
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(1);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE);
          { auto_open_button_ = new Fl_Check_Button(150, 45, 180, 25, _("Auto Open Images"));
            auto_open_button_->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* auto_open_button_
          { keep_zoom_button_ = new Fl_Check_Button(330, 45, 180, 25, _("Keep Image Zoom"));
            keep_zoom_button_->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* keep_zoom_button_
          o->do_layout(FL_ALIGN_LEFT, 0);
          o->end();
        } // SmartGroup* o
        { Fl_Group* o = new Fl_Group(150, 80, 360, 25, _("Editor:"));
          o->labelfont(1);
          o->align(FL_ALIGN_LEFT);
          { image_editor_field_ = new Fl_Input(150, 80, 335, 25);
          } // Fl_Input* image_editor_field_
          { Fl_Button* o = new Fl_Button(485, 80, 25, 25, _("..."));
            o->callback((Fl_Callback*)cb_3);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(150, 115, 360, 135, _("Gamma:\n\n\n\n\n\n\n"));
          o->labelfont(1);
          o->align(FL_ALIGN_LEFT);
          { gamma_slider_ = new Fl_Value_Slider(150, 115, 360, 25);
            gamma_slider_->type(5);
            gamma_slider_->labelfont(1);
            gamma_slider_->minimum(0.1);
            gamma_slider_->maximum(10);
            gamma_slider_->step(0.1);
            gamma_slider_->value(1.7);
            gamma_slider_->callback((Fl_Callback*)cb_gamma_slider_);
            gamma_slider_->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* gamma_slider_
          { Fl_Box* o = new Fl_Box(150, 150, 250, 100, _("Move the gamma slider until the inside box disappears inside the outer box."));
            o->color(FL_BACKGROUND2_COLOR);
            o->labelfont(2);
            o->align(133|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { gamma_box_ = new Fl_Box(410, 150, 100, 100);
            gamma_box_->box(FL_FLAT_BOX);
            gamma_box_->color(FL_BACKGROUND2_COLOR);
          } // Fl_Box* gamma_box_
          o->end();
        } // Fl_Group* o
        image_tab_->do_layout();
        image_tab_->end();
      } // SmartGroup* image_tab_
      { slideshow_tab_ = new SmartGroup(10, 35, 445, 225, _("Slideshow"));
        slideshow_tab_->box(FL_NO_BOX);
        slideshow_tab_->color(FL_BACKGROUND_COLOR);
        slideshow_tab_->selection_color(FL_BACKGROUND_COLOR);
        slideshow_tab_->labeltype(FL_NORMAL_LABEL);
        slideshow_tab_->labelfont(0);
        slideshow_tab_->labelsize(14);
        slideshow_tab_->labelcolor(FL_FOREGROUND_COLOR);
        slideshow_tab_->align(FL_ALIGN_TOP);
        slideshow_tab_->when(FL_WHEN_RELEASE);
        { ssoptions_delay_value_ = new Fl_Value_Slider(160, 45, 285, 25, _("Slide Delay:"));
          ssoptions_delay_value_->type(5);
          ssoptions_delay_value_->labelfont(1);
          ssoptions_delay_value_->maximum(600);
          ssoptions_delay_value_->step(1);
          ssoptions_delay_value_->value(5);
          ssoptions_delay_value_->align(FL_ALIGN_LEFT);
        } // Fl_Value_Slider* ssoptions_delay_value_
        { SmartGroup* o = new SmartGroup(160, 80, 200, 100, _("Options:"));
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(1);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE);
          { ssoptions_first_button_ = new Fl_Check_Button(160, 80, 200, 25, _("Start with First Slide"));
            ssoptions_first_button_->down_box(FL_DOWN_BOX);
            ssoptions_first_button_->value(1);
          } // Fl_Check_Button* ssoptions_first_button_
          { ssoptions_random_button_ = new Fl_Check_Button(160, 105, 200, 25, _("Random Order"));
            ssoptions_random_button_->down_box(FL_DOWN_BOX);
            ssoptions_random_button_->value(1);
          } // Fl_Check_Button* ssoptions_random_button_
          { ssoptions_repeat_button_ = new Fl_Check_Button(160, 130, 200, 25, _("Repeat Slides"));
            ssoptions_repeat_button_->down_box(FL_DOWN_BOX);
            ssoptions_repeat_button_->value(1);
          } // Fl_Check_Button* ssoptions_repeat_button_
          { ssoptions_comments_button_ = new Fl_Check_Button(160, 155, 200, 25, _("Show Comments"));
            ssoptions_comments_button_->down_box(FL_DOWN_BOX);
            ssoptions_comments_button_->value(1);
          } // Fl_Check_Button* ssoptions_comments_button_
          o->do_layout(FL_ALIGN_LEFT, 0, 0, 0);
          o->end();
        } // SmartGroup* o
        { ssoptions_screen_chooser_ = new Fl_Choice(160, 190, 95, 25, _("Screen:"));
          ssoptions_screen_chooser_->down_box(FL_BORDER_BOX);
          ssoptions_screen_chooser_->labelfont(1);
          ssoptions_screen_chooser_->menu(menu_ssoptions_screen_chooser_);
        } // Fl_Choice* ssoptions_screen_chooser_
        { Fl_Group* o = new Fl_Group(160, 225, 285, 25, _("Size:"));
          o->labelfont(1);
          o->align(FL_ALIGN_LEFT);
          { ssoptions_size_chooser_ = new Fl_Choice(160, 225, 145, 25);
            ssoptions_size_chooser_->down_box(FL_BORDER_BOX);
            ssoptions_size_chooser_->labelfont(1);
            ssoptions_size_chooser_->callback((Fl_Callback*)cb_ssoptions_size_chooser_);
            ssoptions_size_chooser_->menu(menu_ssoptions_size_chooser_);
          } // Fl_Choice* ssoptions_size_chooser_
          { ssoptions_custom_group_ = new Fl_Group(315, 225, 130, 25);
            ssoptions_custom_group_->deactivate();
            { ssoptions_width_value_ = new Fl_Spinner(315, 225, 55, 25);
              ssoptions_width_value_->maximum(3072);
              ssoptions_width_value_->value(1);
            } // Fl_Spinner* ssoptions_width_value_
            { ssoptions_height_value_ = new Fl_Spinner(390, 225, 55, 25, _("x "));
              ssoptions_height_value_->maximum(3072);
              ssoptions_height_value_->value(1);
            } // Fl_Spinner* ssoptions_height_value_
            ssoptions_custom_group_->end();
          } // Fl_Group* ssoptions_custom_group_
          o->end();
        } // Fl_Group* o
        slideshow_tab_->do_layout();
        slideshow_tab_->end();
      } // SmartGroup* slideshow_tab_
      { flash_tab_ = new SmartGroup(10, 35, 510, 225, _("Memory Card"));
        flash_tab_->box(FL_NO_BOX);
        flash_tab_->color(FL_BACKGROUND_COLOR);
        flash_tab_->selection_color(FL_BACKGROUND_COLOR);
        flash_tab_->labeltype(FL_NORMAL_LABEL);
        flash_tab_->labelfont(0);
        flash_tab_->labelsize(14);
        flash_tab_->labelcolor(FL_FOREGROUND_COLOR);
        flash_tab_->align(FL_ALIGN_TOP);
        flash_tab_->when(FL_WHEN_RELEASE);
        flash_tab_->hide();
        { Fl_Group* o = new Fl_Group(150, 45, 360, 25, _("Directory:"));
          o->labelfont(1);
          o->align(FL_ALIGN_LEFT);
          { flash_dir_field_ = new Fl_Input(150, 45, 335, 25);
          } // Fl_Input* flash_dir_field_
          { Fl_Button* o = new Fl_Button(485, 45, 25, 25, _("..."));
            o->callback((Fl_Callback*)cb_4);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { SmartGroup* o = new SmartGroup(150, 80, 360, 25, _("Options:"));
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(1);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE);
          { flash_mount_button_ = new Fl_Check_Button(150, 80, 360, 25, _("Mount card on use"));
            flash_mount_button_->down_box(FL_DOWN_BOX);
            flash_mount_button_->value(1);
          } // Fl_Check_Button* flash_mount_button_
          o->do_layout(FL_ALIGN_LEFT, 0);
          o->end();
        } // SmartGroup* o
        flash_tab_->do_layout();
        flash_tab_->end();
      } // SmartGroup* flash_tab_
      options_tabs_->auto_resize(true);
      options_tabs_->end();
      Fl_Group::current()->resizable(options_tabs_);
    } // MenuTabs* options_tabs_
    { SmartGroup* o = new SmartGroup(10, 270, 510, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(340, 270, 80, 25, _("Save"));
        o->box(FL_UP_BOX);
        o->shortcut(0xff0d);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Save7);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(430, 270, 90, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel5);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->child_align(FL_ALIGN_RIGHT);
      o->end();
    } // SmartGroup* o
    options_window_->end();
  } // SpringWindow* options_window_
  { directory_window_ = new Fl_Double_Window(445, 135, _("Export Directory"));
    directory_window_->user_data((void*)(this));
    { directory_form_group_ = new SmartGroup(10, 10, 425, 80);
      directory_form_group_->box(FL_THIN_DOWN_BOX);
      directory_form_group_->color((Fl_Color)48);
      directory_form_group_->selection_color(FL_BACKGROUND_COLOR);
      directory_form_group_->labeltype(FL_NORMAL_LABEL);
      directory_form_group_->labelfont(0);
      directory_form_group_->labelsize(14);
      directory_form_group_->labelcolor(FL_FOREGROUND_COLOR);
      directory_form_group_->align(FL_ALIGN_TOP);
      directory_form_group_->when(FL_WHEN_RELEASE);
      { Fl_Group* o = new Fl_Group(100, 20, 325, 25, _("Export To:"));
        o->labelfont(1);
        o->align(FL_ALIGN_LEFT);
        { directory_field_ = new Fl_Input(100, 20, 300, 25);
          directory_field_->textfont(4);
        } // Fl_Input* directory_field_
        { Fl_Button* o = new Fl_Button(400, 20, 25, 25, _("..."));
          o->callback((Fl_Callback*)cb_5);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { SmartGroup* o = new SmartGroup(100, 55, 325, 25, _("Options:"));
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(1);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_RELEASE);
        { directory_renumber_button_ = new Fl_Check_Button(100, 55, 142, 25, _("Renumber Images"));
          directory_renumber_button_->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* directory_renumber_button_
        o->do_layout(FL_ALIGN_LEFT, 0);
        o->end();
      } // SmartGroup* o
      directory_form_group_->end();
      Fl_Group::current()->resizable(directory_form_group_);
    } // SmartGroup* directory_form_group_
    { directory_button_group_ = new SmartGroup(10, 100, 425, 25);
      directory_button_group_->box(FL_NO_BOX);
      directory_button_group_->color(FL_BACKGROUND_COLOR);
      directory_button_group_->selection_color(FL_BACKGROUND_COLOR);
      directory_button_group_->labeltype(FL_NORMAL_LABEL);
      directory_button_group_->labelfont(0);
      directory_button_group_->labelsize(14);
      directory_button_group_->labelcolor(FL_FOREGROUND_COLOR);
      directory_button_group_->align(FL_ALIGN_TOP);
      directory_button_group_->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(297, 100, 64, 25, _("Export"));
        o->shortcut(0xff0d);
        o->callback((Fl_Callback*)cb_Export1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(371, 100, 64, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel6);
      } // Fl_Button* o
      directory_button_group_->do_layout(FL_ALIGN_RIGHT, 0);
      directory_button_group_->child_align(FL_ALIGN_RIGHT);
      directory_button_group_->end();
    } // SmartGroup* directory_button_group_
    { directory_progress_ = new Fl_Progress(10, 100, 200, 25);
      directory_progress_->selection_color((Fl_Color)4);
      directory_progress_->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
      directory_progress_->hide();
    } // Fl_Progress* directory_progress_
    directory_window_->set_modal();
    directory_window_->end();
  } // Fl_Double_Window* directory_window_
  directory_form_group_->do_layout(FL_ALIGN_TOP, 10, 10, 10, true);
  if (!album_first_)
  update_history();

album_count_ ++;
album_next_ = album_first_;
album_first_ = this;

album_comment_[0]  = '\0';
album_filename_[0] = '\0';
album_changed_     = 0;
camera_            = 0;
context_           = 0;
crop_data_         = 0;
crop_image_        = 0;
image_item_        = 0;

if (filename)
  open_album(filename);
else
  update_title();

gamma_image_ = 0;
}

flphoto::~flphoto() {
  delete window_;
delete camera_window_;
delete crop_window_;
delete scale_window_;
delete jpeg_window_;
delete props_window_;
delete export_html_window_;
delete auth_window_;
delete options_window_;

flphoto *prev, *current;

for (prev = 0, current = album_first_;
     current && current != this;
     prev = current, current = current->album_next_);

if (current == this)
{
  if (prev)
    prev->album_next_ = current->album_next_;
  else
    album_first_ = current->album_next_;
}
if (gamma_image_)
  delete gamma_image_;
}

void flphoto::hide() {
  window_->hide();
}

void flphoto::show() {
  char *app = (char *)"flphoto";

#ifdef WIN32
  // Load the flPhoto icon image...
  window_->icon((char *)LoadImage(fl_display,
                                  MAKEINTRESOURCE(101),
                                  IMAGE_ICON, 16, 16,
                                  LR_DEFAULTCOLOR));
#endif // WIN32

window_->show(1, &app);
}

void flphoto::show_camera() {
  camera_cb();
}

void flphoto::show_last_image() {
  if (browser_->count())
{
  display_->value(browser_->load_item(browser_->count() - 1));
  image_item_ = browser_->value(browser_->count() - 1);
  browser_->select(browser_->count() - 1);
}
else
{
  display_->value(0);
}
}

int flphoto::shown() {
  return window_->shown();
}

int flphoto::visible() {
  return window_->visible();
}

void flphoto::cb_Directories2albums(const char* dirname, const char* albumname) {
  int num_files;		// Number of files in directory
  dirent	**files;		// Files in directory
  char		absdir[1024],		// Absolute directory path
	filename[1024];		// Absolute filename path
	char help[512] =  {'\0'};
	
  fl_filename_absolute(absdir, sizeof(absdir), dirname);
  
	printf("Current Dir: %s \n",dirname);

  num_files = fl_filename_list(dirname, &files);  
  for (int i = 0; i < num_files; i++)
  {
  	snprintf(filename, sizeof(filename), "%s/%s", absdir, files[i]->d_name);
  	if (files[i]->d_name[strlen(files[i]->d_name)-1] == '/') //Is the file a directory? (ends with '/')
  	{
  		if ((files[i]->d_name[0] != '.')) //Ignore if it's dotted
  		{
  			printf("Recursion - ");
  			strcpy(absdir,dirname); 					//Make sure we have the right dir set
  			strcat(absdir,"/");								//Add a slash, we might need it
  			strcat(absdir,files[i]->d_name);	//Add the filename
  			cb_Directories2albums((const char*)absdir, (const char*)files[i]->d_name); //Go into the Recursion
  		}
  	}
  }
  browser_->load(dirname); //let the browser load the Dir
  
  help[0]='\0';
  absdir[0]='\0';
  strcpy(help,getenv("HOME"));
  strcpy(absdir,help);
  strcat(absdir,"/.flphoto/");
  strcat(absdir,albumname);
  absdir[strlen(absdir)-1]='\0';
  strcat(absdir,".album");
  
  printf("%s \n",absdir);
  
  save_album(absdir);
  albums_->add(absdir);
  browser_->clear();
}

//
// End of "$Id: flphoto.cxx 412 2006-11-15 04:20:01Z mike $".
//
