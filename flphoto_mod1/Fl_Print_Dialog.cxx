//
// "$Id: Fl_Print_Dialog.cxx 439 2006-12-08 03:26:01Z mike $"
//
// flPhoto print dialog.
//
// Copyright 2002-2006 by Michael Sweet.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "i18n.h"
#include "Fl_Print_Dialog.H"

void Fl_Print_Dialog::cb_printer_chooser__i(Fl_Choice*, void*) {
  printer_cb();
}
void Fl_Print_Dialog::cb_printer_chooser_(Fl_Choice* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_printer_chooser__i(o,v);
}

void Fl_Print_Dialog::cb_print_current_button__i(Fl_Round_Button*, void*) {
  matcolors(image_browser_);
}
void Fl_Print_Dialog::cb_print_current_button_(Fl_Round_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_current_button__i(o,v);
}

void Fl_Print_Dialog::cb_print_selected_button__i(Fl_Round_Button*, void*) {
  matcolors(image_browser_);
}
void Fl_Print_Dialog::cb_print_selected_button_(Fl_Round_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_selected_button__i(o,v);
}

void Fl_Print_Dialog::cb_print_all_button__i(Fl_Round_Button*, void*) {
  matcolors(image_browser_);
}
void Fl_Print_Dialog::cb_print_all_button_(Fl_Round_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_all_button__i(o,v);
}

void Fl_Print_Dialog::cb_print_index_button__i(Fl_Button*, void*) {
  calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_index_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_index_button__i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_print_index[] = {
"17 20 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                 ",
" ... ... ... ... ",
" ... ... ... ... ",
"                 ",
"                 ",
" ... ... ... ... ",
" ... ... ... ... ",
"                 ",
"                 ",
" ... ... ... ... ",
" ... ... ... ... ",
"                 ",
"                 ",
" ... ... ... ... ",
" ... ... ... ... ",
"                 ",
"                 ",
" ... ... ... ... ",
" ... ... ... ... ",
"                 "
};
static Fl_Pixmap image_print_index(idata_print_index);

void Fl_Print_Dialog::cb_print_1up_button__i(Fl_Button*, void*) {
  calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_1up_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_1up_button__i(o,v);
}

static const char *idata_print_1up[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
"                  "
};
static Fl_Pixmap image_print_1up(idata_print_1up);

void Fl_Print_Dialog::cb_print_2up_button__i(Fl_Button*, void*) {
  calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_2up_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_2up_button__i(o,v);
}

static const char *idata_print_2up[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
"                  ",
"                  ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
"                  "
};
static Fl_Pixmap image_print_2up(idata_print_2up);

void Fl_Print_Dialog::cb_print_4up_button__i(Fl_Button*, void*) {
  calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_4up_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_4up_button__i(o,v);
}

static const char *idata_print_4up[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
"                  ",
"                  ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
" .......  ....... ",
"                  "
};
static Fl_Pixmap image_print_4up(idata_print_4up);

void Fl_Print_Dialog::cb_print_portrait_button__i(Fl_Button*, void*) {
  calendar_group_->deactivate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_portrait_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_portrait_button__i(o,v);
}

static const char *idata_print_portrait[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" .......... ..... ",
" .......... ..... ",
" ..........       ",
" .......... ..... ",
" .......... ..... ",
" .......... ..... ",
" ..........       ",
" .......... ..... ",
" .......... ..... ",
" ..........       ",
" .......... ..... ",
" .......... ..... ",
" .......... ..... ",
"                  ",
" .......... ..... ",
" .......... ..... ",
" ..........       ",
" .......... ..... ",
" .......... ..... ",
" .......... ..... ",
"                  "
};
static Fl_Pixmap image_print_portrait(idata_print_portrait);

void Fl_Print_Dialog::cb_print_calendar_button__i(Fl_Button*, void*) {
  calendar_group_->activate();
mat_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_calendar_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_calendar_button__i(o,v);
}

static const char *idata_print_cal[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
" ................ ",
"                  ",
" ................ ",
" .  .  .  .  .  . ",
" .  .  .  .  .  . ",
" ................ ",
" .  .  .  .  .  . ",
" .  .  .  .  .  . ",
" ................ ",
" .  .  .  .  .  . ",
" .  .  .  .  .  . ",
" ................ ",
"                  "
};
static Fl_Pixmap image_print_cal(idata_print_cal);

void Fl_Print_Dialog::cb_print_matted_button__i(Fl_Button*, void*) {
  mat_group_->activate();
calendar_group_->deactivate();
tabs_->damage(FL_DAMAGE_SCROLL);
}
void Fl_Print_Dialog::cb_print_matted_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_print_matted_button__i(o,v);
}

static const char *idata_print_mat[] = {
"18 22 2 1",
" \tc #FFFFFF",
".\tc #000000",
"                  ",
" ................ ",
" ................ ",
" ................ ",
" ...          ... ",
" ..     ..     .. ",
" ..    ....    .. ",
" ..   ......   .. ",
" ..   ......   .. ",
" ..    ....    .. ",
" ..     ..     .. ",
" ..   ......   .. ",
" ..  ........  .. ",
" .. .......... .. ",
" .. .......... .. ",
" .. .......... .. ",
" .. .......... .. ",
" ...          ... ",
" ................ ",
" ................ ",
" ................ ",
"                  "
};
static Fl_Pixmap image_print_mat(idata_print_mat);

Fl_Menu_Item Fl_Print_Dialog::menu_quality_chooser_[] = {
 {_("Draft"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Normal"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Best"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Fl_Print_Dialog::menu_mode_chooser_[] = {
 {_("Grayscale"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Color"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Fl_Print_Dialog::cb_media_chooser__i(Fl_Choice*, void*) {
  media_cb();
}
void Fl_Print_Dialog::cb_media_chooser_(Fl_Choice* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_media_chooser__i(o,v);
}

Fl_Menu_Item Fl_Print_Dialog::menu_media_units_[] = {
 {_("cm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("in"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("mm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("pt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Fl_Print_Dialog::menu_calendar_day_chooser_[] = {
 {_("Saturday"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Sunday"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Monday"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Fl_Print_Dialog::menu_calendar_month_chooser_[] = {
 {_("January"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("February"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("March"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("April"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("May"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("June"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("July"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("August"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("September"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("October"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("November"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("December"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Fl_Print_Dialog::menu_calendar_type_chooser_[] = {
 {_("Page"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Folded, Front Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Folded, Back Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Folded, All Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Bound, Front Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Bound, Back Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Bound, All Pages"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Fl_Print_Dialog::cb__i(Fl_Button*, void*) {
  const char *f = fl_file_chooser("Date File?",
                    "Text Files (*.txt)",
                    calendar_file_field_->value());

if (f)
  calendar_file_field_->value(f);
}
void Fl_Print_Dialog::cb_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void Fl_Print_Dialog::cb_1_i(Fl_Button*, void*) {
  date_window_->hotspot(date_window_);
date_window_->show();

date_browser_->clear();
if (calendar_file_field_->value()[0])
{
  date_browser_->load(calendar_file_field_->value());
  if (!date_browser_->text(date_browser_->size())[0])
    date_browser_->remove(date_browser_->size());
}
date_remove_button_->deactivate();
date_group_->deactivate();
time_t curtime = time(NULL);
struct tm *curdate = localtime(&curtime);
date_year_->value(1900 + curdate->tm_year);
date_month_->value(curdate->tm_mon + 1);
date_day_->value(curdate->tm_mday);
date_repeat_button_->clear();
date_comment_->deactivate();
date_comment_->value("");
}
void Fl_Print_Dialog::cb_1(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

static const char *idata_pencil[] = {
"16 16 6 1",
". c None",
"d c #000000",
"b c #808000",
"c c #808080",
"a c #c0c000",
"# c #ffff00",
"...........##a..",
"..........##a##.",
".........##a###.",
"........##a#b##.",
".......##a#b##c.",
"......##a#b##c..",
".....##a#b##c...",
"....##a#b##c....",
"...##a####c.....",
"..##a####c......",
".##a####c.......",
"##a####c........",
"ba####c.........",
"bb###c..........",
"dbb#c...........",
".ccc............"
};
static Fl_Pixmap image_pencil(idata_pencil);

void Fl_Print_Dialog::cb_mat_type_chooser__i(Fl_Choice*, void*) {
  mat_type_cb();
}
void Fl_Print_Dialog::cb_mat_type_chooser_(Fl_Choice* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_type_chooser__i(o,v);
}

Fl_Menu_Item Fl_Print_Dialog::menu_mat_type_chooser_[] = {
 {_("Blank"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Plain"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Standard"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Velvet"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item Fl_Print_Dialog::menu_mat_width_units_[] = {
 {_("cm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("in"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("mm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("pt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Fl_Print_Dialog::cb_mat_color_field__i(Fl_Input*, void*) {
  mat_color_cb(mat_color_field_);
}
void Fl_Print_Dialog::cb_mat_color_field_(Fl_Input* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_field__i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_button__i(Fl_Button*, void*) {
  mat_color_cb(mat_color_button_);
}
void Fl_Print_Dialog::cb_mat_color_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_button__i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons__i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[0]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons__i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_1_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[1]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_1(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_1_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_2_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[2]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_2(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_2_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_3_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[3]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_3(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_3_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_4_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[4]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_4(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_4_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_5_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[5]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_5(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_5_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_6_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[6]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_6(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_6_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_7_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[7]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_7(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_7_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_8_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[8]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_8(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_8_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_9_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[9]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_9(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_9_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_a_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[10]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_a(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_a_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_b_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[11]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_b(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_b_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_c_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[12]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_c(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_c_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_d_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[13]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_d(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_d_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_e_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[14]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_e(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_e_i(o,v);
}

void Fl_Print_Dialog::cb_mat_color_buttons_f_i(Fl_Button*, void*) {
  mat_color_cb(mat_color_buttons_[15]);
}
void Fl_Print_Dialog::cb_mat_color_buttons_f(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mat_color_buttons_f_i(o,v);
}

Fl_Menu_Item Fl_Print_Dialog::menu_image_units_[] = {
 {_("cm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("in"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("mm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("pt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Fl_Print_Dialog::cb_Print_i(Fl_Button*, void*) {
  print_cb();
}
void Fl_Print_Dialog::cb_Print(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->user_data()))->cb_Print_i(o,v);
}

void Fl_Print_Dialog::cb_Cancel_i(Fl_Button*, void*) {
  window_->hide();
}
void Fl_Print_Dialog::cb_Cancel(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void Fl_Print_Dialog::cb_date_browser__i(Fl_Browser*, void*) {
  if (date_browser_->value())
{
  char	line[1024],
	*repeat,
	*comment;
  int	year, month, day;


  strlcpy(line, date_browser_->text(date_browser_->value()), sizeof(line));
  if ((repeat = strchr(line, '\t')) != NULL)
  {
    *repeat++ = '\0';

    if ((comment = strchr(repeat, '\t')) != NULL)
    {
      *comment++ = '\0';
      date_comment_->value(comment);
    }
    else
      date_comment_->value("");

    if (!strcmp(repeat, "REPEAT"))
      date_repeat_button_->set();
    else
      date_repeat_button_->clear();
  }
  else
  {
    date_repeat_button_->clear();
    date_comment_->value("");
  }

  year = 0;
  month = day = 1;

  sscanf(line, "%d-%d-%d", &year, &month, &day);

  date_year_->value(year);
  date_month_->value(month);
  date_day_->value(day);

  date_group_->activate();
  date_comment_->activate();
  date_remove_button_->activate();
}
else
{
  date_group_->deactivate();
  time_t curtime = time(NULL);
  struct tm *curdate = localtime(&curtime);
  date_year_->value(1900 + curdate->tm_year);
  date_month_->value(curdate->tm_mon + 1);
  date_day_->value(curdate->tm_mday);
  date_repeat_button_->clear();
  date_comment_->deactivate();
  date_comment_->value("");
  date_remove_button_->deactivate();
};
}
void Fl_Print_Dialog::cb_date_browser_(Fl_Browser* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_date_browser__i(o,v);
}

void Fl_Print_Dialog::cb_5plus_i(Fl_Button*, void*) {
  time_t curtime = time(NULL);
struct tm *curdate = localtime(&curtime);
char s[255];

snprintf(s, sizeof(s), "%04d-%02d-%02d\tONCE\tNew date",
         curdate->tm_year + 1900,
         curdate->tm_mon + 1,
         curdate->tm_mday);

date_browser_->add(s);
date_browser_->value(date_browser_->size());
date_browser_->do_callback();
}
void Fl_Print_Dialog::cb_5plus(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_5plus_i(o,v);
}

void Fl_Print_Dialog::cb_date_remove_button__i(Fl_Button*, void*) {
  if (date_browser_->value())
{
  date_browser_->remove(date_browser_->value());
  date_browser_->do_callback();
};
}
void Fl_Print_Dialog::cb_date_remove_button_(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_date_remove_button__i(o,v);
}

void Fl_Print_Dialog::cb_date_repeat_button__i(Fl_Check_Button*, void*) {
  date_update_cb();
}
void Fl_Print_Dialog::cb_date_repeat_button_(Fl_Check_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_date_repeat_button__i(o,v);
}

void Fl_Print_Dialog::cb_date_year__i(Fl_Spinner*, void*) {
  date_update_cb();
}
void Fl_Print_Dialog::cb_date_year_(Fl_Spinner* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_date_year__i(o,v);
}

void Fl_Print_Dialog::cb_date_month__i(Fl_Spinner*, void*) {
  date_update_cb();
}
void Fl_Print_Dialog::cb_date_month_(Fl_Spinner* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_date_month__i(o,v);
}

void Fl_Print_Dialog::cb_date_day__i(Fl_Spinner*, void*) {
  date_update_cb();
}
void Fl_Print_Dialog::cb_date_day_(Fl_Spinner* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_date_day__i(o,v);
}

void Fl_Print_Dialog::cb_date_comment__i(Fl_Input*, void*) {
  date_update_cb();
}
void Fl_Print_Dialog::cb_date_comment_(Fl_Input* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->parent()->user_data()))->cb_date_comment__i(o,v);
}

void Fl_Print_Dialog::cb_4reload_i(Fl_Button*, void*) {
  int i, j;
date_browser_->deselect(1);
date_browser_->do_callback();
for (i = 1; i < date_browser_->size(); i ++)
  for (j = i + 1; j <= date_browser_->size(); j ++)
    if (strcasecmp(date_browser_->text(i),
                   date_browser_->text(j)) > 0)
      date_browser_->swap(i, j);
}
void Fl_Print_Dialog::cb_4reload(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_4reload_i(o,v);
}

void Fl_Print_Dialog::cb_Save_i(Fl_Button*, void*) {
  const char *cname = calendar_file_field_->value();

if (!*cname)
{
  cname = "/tmp/dates.txt";
  calendar_file_field_->value(cname);
}

FILE *fp = fopen(cname, "w");
if (!fp)
{
  fl_alert(_("Unable to create \"%s\":\n%s"),
           cname, strerror(errno));
  return;
}

for (int i = 1; i <= date_browser_->size(); i ++)
  fprintf(fp, "%s\n", date_browser_->text(i));

fclose(fp);

date_window_->hide();
}
void Fl_Print_Dialog::cb_Save(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void Fl_Print_Dialog::cb_Cancel1_i(Fl_Button*, void*) {
  date_window_->hide();
}
void Fl_Print_Dialog::cb_Cancel1(Fl_Button* o, void* v) {
  ((Fl_Print_Dialog*)(o->parent()->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void Fl_Print_Dialog::date_update_cb() {
  char	line[1024];

snprintf(line, sizeof(line), "%04d-%02d-%02d\t%s\t%s",
         (int)date_year_->value(),
         (int)date_month_->value(),
         (int)date_day_->value(),
         date_repeat_button_->value() ? "REPEAT" : "ONCE",
         date_comment_->value());

int i = date_browser_->value();
date_browser_->remove(i);
date_browser_->insert(i, line);
date_browser_->value(i);
}

Fl_Print_Dialog::Fl_Print_Dialog() {
  { window_ = new SpringWindow(435, 410, _("Print"));
    window_->box(FL_FLAT_BOX);
    window_->color(FL_BACKGROUND_COLOR);
    window_->selection_color(FL_BACKGROUND_COLOR);
    window_->labeltype(FL_NO_LABEL);
    window_->labelfont(0);
    window_->labelsize(14);
    window_->labelcolor(FL_FOREGROUND_COLOR);
    window_->user_data((void*)(this));
    window_->align(FL_ALIGN_TOP);
    window_->when(FL_WHEN_RELEASE);
    { control_group_ = new Fl_Group(10, 10, 415, 390);
      { printer_chooser_ = new Fl_Choice(200, 10, 225, 25, _("Printer: "));
        printer_chooser_->down_box(FL_BORDER_BOX);
        printer_chooser_->labelfont(1);
        printer_chooser_->callback((Fl_Callback*)cb_printer_chooser_);
      } // Fl_Choice* printer_chooser_
      { print_to_file_button_ = new Fl_Check_Button(200, 40, 225, 25, _("Print to File"));
        print_to_file_button_->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* print_to_file_button_
      { tabs_ = new MenuTabs(10, 80, 415, 285);
        tabs_->box(FL_THIN_DOWN_BOX);
        tabs_->color((Fl_Color)48);
        tabs_->selection_color(FL_BACKGROUND_COLOR);
        tabs_->labeltype(FL_NORMAL_LABEL);
        tabs_->labelfont(0);
        tabs_->labelsize(14);
        tabs_->labelcolor(FL_FOREGROUND_COLOR);
        tabs_->align(FL_ALIGN_TOP);
        tabs_->when(FL_WHEN_RELEASE);
        { general_tab_ = new SmartGroup(10, 105, 415, 235, _("General"));
          general_tab_->box(FL_NO_BOX);
          general_tab_->color(FL_BACKGROUND_COLOR);
          general_tab_->selection_color(FL_BACKGROUND_COLOR);
          general_tab_->labeltype(FL_NORMAL_LABEL);
          general_tab_->labelfont(0);
          general_tab_->labelsize(14);
          general_tab_->labelcolor(FL_FOREGROUND_COLOR);
          general_tab_->align(FL_ALIGN_TOP);
          general_tab_->when(FL_WHEN_RELEASE);
          general_tab_->hide();
          { Fl_Group* o = new Fl_Group(175, 115, 240, 80, _("Which:\n\n\n\n"));
            o->color(FL_LIGHT1);
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { print_current_button_ = new Fl_Round_Button(180, 115, 235, 25, _("Current Image"));
              print_current_button_->type(102);
              print_current_button_->down_box(FL_ROUND_DOWN_BOX);
              print_current_button_->value(1);
              print_current_button_->color(FL_LIGHT1);
              print_current_button_->callback((Fl_Callback*)cb_print_current_button_);
            } // Fl_Round_Button* print_current_button_
            { print_selected_button_ = new Fl_Round_Button(180, 140, 235, 25, _("Selected Images"));
              print_selected_button_->type(102);
              print_selected_button_->down_box(FL_ROUND_DOWN_BOX);
              print_selected_button_->color(FL_LIGHT1);
              print_selected_button_->callback((Fl_Callback*)cb_print_selected_button_);
            } // Fl_Round_Button* print_selected_button_
            { print_all_button_ = new Fl_Round_Button(180, 165, 235, 25, _("All Images"));
              print_all_button_->type(102);
              print_all_button_->down_box(FL_ROUND_DOWN_BOX);
              print_all_button_->color(FL_LIGHT1);
              print_all_button_->callback((Fl_Callback*)cb_print_all_button_);
            } // Fl_Round_Button* print_all_button_
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(180, 195, 235, 30, _("Format:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { print_index_button_ = new Fl_Button(180, 195, 25, 30);
              print_index_button_->tooltip(_("Thumbnail Pages"));
              print_index_button_->type(102);
              print_index_button_->box(FL_THIN_UP_BOX);
              print_index_button_->down_box(FL_THIN_DOWN_BOX);
              print_index_button_->value(1);
              print_index_button_->selection_color(FL_SELECTION_COLOR);
              print_index_button_->image(image_print_index);
              print_index_button_->callback((Fl_Callback*)cb_print_index_button_);
            } // Fl_Button* print_index_button_
            { print_1up_button_ = new Fl_Button(215, 195, 25, 30);
              print_1up_button_->tooltip(_("1-Up Pages"));
              print_1up_button_->type(102);
              print_1up_button_->box(FL_THIN_UP_BOX);
              print_1up_button_->down_box(FL_THIN_DOWN_BOX);
              print_1up_button_->selection_color(FL_SELECTION_COLOR);
              print_1up_button_->image(image_print_1up);
              print_1up_button_->callback((Fl_Callback*)cb_print_1up_button_);
            } // Fl_Button* print_1up_button_
            { print_2up_button_ = new Fl_Button(250, 195, 25, 30);
              print_2up_button_->tooltip(_("2-Up Pages"));
              print_2up_button_->type(102);
              print_2up_button_->box(FL_THIN_UP_BOX);
              print_2up_button_->down_box(FL_THIN_DOWN_BOX);
              print_2up_button_->selection_color(FL_SELECTION_COLOR);
              print_2up_button_->image(image_print_2up);
              print_2up_button_->callback((Fl_Callback*)cb_print_2up_button_);
            } // Fl_Button* print_2up_button_
            { print_4up_button_ = new Fl_Button(285, 195, 25, 30);
              print_4up_button_->tooltip(_("4-Up Pages"));
              print_4up_button_->type(102);
              print_4up_button_->box(FL_THIN_UP_BOX);
              print_4up_button_->down_box(FL_THIN_DOWN_BOX);
              print_4up_button_->selection_color(FL_SELECTION_COLOR);
              print_4up_button_->image(image_print_4up);
              print_4up_button_->callback((Fl_Callback*)cb_print_4up_button_);
            } // Fl_Button* print_4up_button_
            { print_portrait_button_ = new Fl_Button(320, 195, 25, 30);
              print_portrait_button_->tooltip(_("Small and Medium Portrait + Wallet Prints"));
              print_portrait_button_->type(102);
              print_portrait_button_->box(FL_THIN_UP_BOX);
              print_portrait_button_->down_box(FL_THIN_DOWN_BOX);
              print_portrait_button_->color(FL_BACKGROUND2_COLOR);
              print_portrait_button_->selection_color(FL_SELECTION_COLOR);
              print_portrait_button_->image(image_print_portrait);
              print_portrait_button_->callback((Fl_Callback*)cb_print_portrait_button_);
            } // Fl_Button* print_portrait_button_
            { print_calendar_button_ = new Fl_Button(355, 195, 25, 30);
              print_calendar_button_->tooltip(_("Calendars"));
              print_calendar_button_->type(102);
              print_calendar_button_->box(FL_THIN_UP_BOX);
              print_calendar_button_->down_box(FL_THIN_DOWN_BOX);
              print_calendar_button_->selection_color(FL_SELECTION_COLOR);
              print_calendar_button_->image(image_print_cal);
              print_calendar_button_->callback((Fl_Callback*)cb_print_calendar_button_);
            } // Fl_Button* print_calendar_button_
            { print_matted_button_ = new Fl_Button(390, 195, 25, 30);
              print_matted_button_->tooltip(_("Matted Images"));
              print_matted_button_->type(102);
              print_matted_button_->box(FL_THIN_UP_BOX);
              print_matted_button_->down_box(FL_THIN_DOWN_BOX);
              print_matted_button_->selection_color(FL_SELECTION_COLOR);
              print_matted_button_->image(image_print_mat);
              print_matted_button_->callback((Fl_Callback*)cb_print_matted_button_);
            } // Fl_Button* print_matted_button_
            o->end();
          } // Fl_Group* o
          { copies_value_ = new Fl_Spinner(180, 235, 45, 25, _("Copies:"));
            copies_value_->labelfont(1);
            copies_value_->value(1);
          } // Fl_Spinner* copies_value_
          { quality_chooser_ = new Fl_Choice(180, 270, 165, 25, _("Quality:"));
            quality_chooser_->down_box(FL_BORDER_BOX);
            quality_chooser_->labelfont(1);
            quality_chooser_->menu(menu_quality_chooser_);
          } // Fl_Choice* quality_chooser_
          { mode_chooser_ = new Fl_Choice(180, 305, 165, 25, _("Mode:"));
            mode_chooser_->down_box(FL_BORDER_BOX);
            mode_chooser_->labelfont(1);
            mode_chooser_->menu(menu_mode_chooser_);
          } // Fl_Choice* mode_chooser_
          general_tab_->do_layout();
          general_tab_->end();
        } // SmartGroup* general_tab_
        { printer_tab_ = new Fl_Group(10, 105, 415, 230, _("Printer"));
          { media_chooser_ = new Fl_Choice(225, 115, 190, 25, _("Media Size:"));
            media_chooser_->down_box(FL_BORDER_BOX);
            media_chooser_->labelfont(1);
            media_chooser_->callback((Fl_Callback*)cb_media_chooser_);
          } // Fl_Choice* media_chooser_
          { media_group_ = new Fl_Group(225, 145, 165, 25);
            media_group_->deactivate();
            { media_width_value_ = new Fl_Spinner(225, 145, 50, 25, _("x"));
              media_width_value_->maximum(999);
              media_width_value_->step(0.01);
              media_width_value_->value(1);
              media_width_value_->align(FL_ALIGN_RIGHT);
            } // Fl_Spinner* media_width_value_
            { media_length_value_ = new Fl_Spinner(290, 145, 50, 25);
              media_length_value_->maximum(999);
              media_length_value_->step(0.01);
              media_length_value_->value(1);
              media_length_value_->align(FL_ALIGN_RIGHT);
            } // Fl_Spinner* media_length_value_
            { media_units_ = new Fl_Choice(340, 145, 50, 25);
              media_units_->down_box(FL_BORDER_BOX);
              media_units_->menu(menu_media_units_);
            } // Fl_Choice* media_units_
            media_group_->end();
          } // Fl_Group* media_group_
          { ppd_scroll_ = new Fl_Scroll(20, 180, 395, 145);
            ppd_scroll_->type(6);
            ppd_scroll_->box(FL_FLAT_BOX);
            ppd_scroll_->color((Fl_Color)48);
            ppd_scroll_->deactivate();
            ppd_scroll_->end();
          } // Fl_Scroll* ppd_scroll_
          printer_tab_->end();
        } // Fl_Group* printer_tab_
        { calendar_group_ = new SmartGroup(10, 105, 415, 250, _("Calendar"));
          calendar_group_->box(FL_NO_BOX);
          calendar_group_->color(FL_BACKGROUND_COLOR);
          calendar_group_->selection_color(FL_BACKGROUND_COLOR);
          calendar_group_->labeltype(FL_NORMAL_LABEL);
          calendar_group_->labelfont(0);
          calendar_group_->labelsize(14);
          calendar_group_->labelcolor(FL_FOREGROUND_COLOR);
          calendar_group_->align(FL_ALIGN_TOP);
          calendar_group_->when(FL_WHEN_RELEASE);
          calendar_group_->hide();
          { calendar_day_chooser_ = new Fl_Choice(140, 120, 110, 25, _("Start Day:"));
            calendar_day_chooser_->down_box(FL_BORDER_BOX);
            calendar_day_chooser_->labelfont(1);
            calendar_day_chooser_->menu(menu_calendar_day_chooser_);
          } // Fl_Choice* calendar_day_chooser_
          { calendar_month_chooser_ = new Fl_Choice(140, 155, 110, 25, _("Start Month:"));
            calendar_month_chooser_->down_box(FL_BORDER_BOX);
            calendar_month_chooser_->labelfont(1);
            calendar_month_chooser_->menu(menu_calendar_month_chooser_);
          } // Fl_Choice* calendar_month_chooser_
          { calendar_year_value_ = new Fl_Spinner(140, 190, 55, 25, _("Start Year:"));
            calendar_year_value_->labelfont(1);
            calendar_year_value_->minimum(1970);
            calendar_year_value_->maximum(2037);
            calendar_year_value_->value(2002);
          } // Fl_Spinner* calendar_year_value_
          { SmartGroup* o = new SmartGroup(140, 225, 190, 50, _("Image Position:"));
            o->box(FL_NO_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(1);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
            { calendar_left_button_ = new Fl_Round_Button(140, 225, 90, 25, _("Left"));
              calendar_left_button_->type(102);
              calendar_left_button_->down_box(FL_ROUND_DOWN_BOX);
            } // Fl_Round_Button* calendar_left_button_
            { calendar_top_button_ = new Fl_Round_Button(230, 225, 100, 25, _("Top"));
              calendar_top_button_->type(102);
              calendar_top_button_->down_box(FL_ROUND_DOWN_BOX);
            } // Fl_Round_Button* calendar_top_button_
            { calendar_auto_button_ = new Fl_Round_Button(140, 250, 190, 25, _("Auto"));
              calendar_auto_button_->type(102);
              calendar_auto_button_->down_box(FL_ROUND_DOWN_BOX);
              calendar_auto_button_->value(1);
            } // Fl_Round_Button* calendar_auto_button_
            o->do_layout(FL_ALIGN_LEFT, 0, 10, 0);
            o->end();
          } // SmartGroup* o
          { calendar_type_chooser_ = new Fl_Choice(140, 285, 190, 25, _("Type:"));
            calendar_type_chooser_->down_box(FL_BORDER_BOX);
            calendar_type_chooser_->labelfont(1);
            calendar_type_chooser_->menu(menu_calendar_type_chooser_);
          } // Fl_Choice* calendar_type_chooser_
          { Fl_Group* o = new Fl_Group(140, 320, 275, 25, _("Date File:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { calendar_file_field_ = new Fl_Input(140, 320, 225, 25);
              calendar_file_field_->textfont(4);
            } // Fl_Input* calendar_file_field_
            { Fl_Button* o = new Fl_Button(365, 320, 25, 25, _("..."));
              o->callback((Fl_Callback*)cb_);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(390, 320, 25, 25);
              o->image(image_pencil);
              o->callback((Fl_Callback*)cb_1);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          calendar_group_->do_layout();
          calendar_group_->end();
        } // SmartGroup* calendar_group_
        { mat_group_ = new Fl_Group(10, 105, 365, 260, _("Matted Images"));
          mat_group_->hide();
          { mat_type_chooser_ = new Fl_Choice(165, 120, 115, 25, _("Mat Type:"));
            mat_type_chooser_->down_box(FL_BORDER_BOX);
            mat_type_chooser_->labelfont(1);
            mat_type_chooser_->callback((Fl_Callback*)cb_mat_type_chooser_);
            mat_type_chooser_->menu(menu_mat_type_chooser_);
            mat_type_chooser_->value(0);
          } // Fl_Choice* mat_type_chooser_
          { mat_preview_box_ = new Fl_Box(295, 120, 70, 70);
          } // Fl_Box* mat_preview_box_
          { Fl_Group* o = new Fl_Group(165, 155, 105, 25, _("Mat Width:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { mat_width_value_ = new Fl_Spinner(165, 155, 45, 25);
              mat_width_value_->minimum(0.1);
              mat_width_value_->maximum(10);
              mat_width_value_->step(0.1);
              mat_width_value_->value(2);
            } // Fl_Spinner* mat_width_value_
            { mat_width_units_ = new Fl_Choice(210, 155, 60, 25);
              mat_width_units_->down_box(FL_BORDER_BOX);
              mat_width_units_->menu(menu_mat_width_units_);
            } // Fl_Choice* mat_width_units_
            o->end();
          } // Fl_Group* o
          { mat_color_field_ = new Fl_Input(165, 190, 70, 25, _("Mat Color:"));
            mat_color_field_->labelfont(1);
            mat_color_field_->textfont(4);
            mat_color_field_->callback((Fl_Callback*)cb_mat_color_field_);
            mat_color_field_->when(FL_WHEN_CHANGED);
          } // Fl_Input* mat_color_field_
          { mat_color_button_ = new Fl_Button(235, 190, 25, 25, _("..."));
            mat_color_button_->color(FL_DARK_BLUE);
            mat_color_button_->callback((Fl_Callback*)cb_mat_color_button_);
          } // Fl_Button* mat_color_button_
          { mat_color_buttons_[0] = new Fl_Button(165, 220, 25, 15);
            mat_color_buttons_[0]->box(FL_BORDER_BOX);
            mat_color_buttons_[0]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[0]->callback((Fl_Callback*)cb_mat_color_buttons_);
          } // Fl_Button* mat_color_buttons_[0]
          { mat_color_buttons_[1] = new Fl_Button(190, 220, 25, 15);
            mat_color_buttons_[1]->box(FL_BORDER_BOX);
            mat_color_buttons_[1]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[1]->callback((Fl_Callback*)cb_mat_color_buttons_1);
          } // Fl_Button* mat_color_buttons_[1]
          { mat_color_buttons_[2] = new Fl_Button(215, 220, 25, 15);
            mat_color_buttons_[2]->box(FL_BORDER_BOX);
            mat_color_buttons_[2]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[2]->callback((Fl_Callback*)cb_mat_color_buttons_2);
          } // Fl_Button* mat_color_buttons_[2]
          { mat_color_buttons_[3] = new Fl_Button(240, 220, 25, 15);
            mat_color_buttons_[3]->box(FL_BORDER_BOX);
            mat_color_buttons_[3]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[3]->callback((Fl_Callback*)cb_mat_color_buttons_3);
          } // Fl_Button* mat_color_buttons_[3]
          { mat_color_buttons_[4] = new Fl_Button(265, 220, 25, 15);
            mat_color_buttons_[4]->box(FL_BORDER_BOX);
            mat_color_buttons_[4]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[4]->callback((Fl_Callback*)cb_mat_color_buttons_4);
          } // Fl_Button* mat_color_buttons_[4]
          { mat_color_buttons_[5] = new Fl_Button(290, 220, 25, 15);
            mat_color_buttons_[5]->box(FL_BORDER_BOX);
            mat_color_buttons_[5]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[5]->callback((Fl_Callback*)cb_mat_color_buttons_5);
          } // Fl_Button* mat_color_buttons_[5]
          { mat_color_buttons_[6] = new Fl_Button(315, 220, 25, 15);
            mat_color_buttons_[6]->box(FL_BORDER_BOX);
            mat_color_buttons_[6]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[6]->callback((Fl_Callback*)cb_mat_color_buttons_6);
          } // Fl_Button* mat_color_buttons_[6]
          { mat_color_buttons_[7] = new Fl_Button(340, 220, 25, 15);
            mat_color_buttons_[7]->box(FL_BORDER_BOX);
            mat_color_buttons_[7]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[7]->callback((Fl_Callback*)cb_mat_color_buttons_7);
          } // Fl_Button* mat_color_buttons_[7]
          { mat_color_buttons_[8] = new Fl_Button(165, 235, 25, 15);
            mat_color_buttons_[8]->box(FL_BORDER_BOX);
            mat_color_buttons_[8]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[8]->callback((Fl_Callback*)cb_mat_color_buttons_8);
          } // Fl_Button* mat_color_buttons_[8]
          { mat_color_buttons_[9] = new Fl_Button(190, 235, 25, 15);
            mat_color_buttons_[9]->box(FL_BORDER_BOX);
            mat_color_buttons_[9]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[9]->callback((Fl_Callback*)cb_mat_color_buttons_9);
          } // Fl_Button* mat_color_buttons_[9]
          { mat_color_buttons_[10] = new Fl_Button(215, 235, 25, 15);
            mat_color_buttons_[10]->box(FL_BORDER_BOX);
            mat_color_buttons_[10]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[10]->callback((Fl_Callback*)cb_mat_color_buttons_a);
          } // Fl_Button* mat_color_buttons_[10]
          { mat_color_buttons_[11] = new Fl_Button(240, 235, 25, 15);
            mat_color_buttons_[11]->box(FL_BORDER_BOX);
            mat_color_buttons_[11]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[11]->callback((Fl_Callback*)cb_mat_color_buttons_b);
          } // Fl_Button* mat_color_buttons_[11]
          { mat_color_buttons_[12] = new Fl_Button(265, 235, 25, 15);
            mat_color_buttons_[12]->box(FL_BORDER_BOX);
            mat_color_buttons_[12]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[12]->callback((Fl_Callback*)cb_mat_color_buttons_c);
          } // Fl_Button* mat_color_buttons_[12]
          { mat_color_buttons_[13] = new Fl_Button(290, 235, 25, 15);
            mat_color_buttons_[13]->box(FL_BORDER_BOX);
            mat_color_buttons_[13]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[13]->callback((Fl_Callback*)cb_mat_color_buttons_d);
          } // Fl_Button* mat_color_buttons_[13]
          { mat_color_buttons_[14] = new Fl_Button(315, 235, 25, 15);
            mat_color_buttons_[14]->box(FL_BORDER_BOX);
            mat_color_buttons_[14]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[14]->callback((Fl_Callback*)cb_mat_color_buttons_e);
          } // Fl_Button* mat_color_buttons_[14]
          { mat_color_buttons_[15] = new Fl_Button(340, 235, 25, 15);
            mat_color_buttons_[15]->box(FL_BORDER_BOX);
            mat_color_buttons_[15]->color(FL_FOREGROUND_COLOR);
            mat_color_buttons_[15]->callback((Fl_Callback*)cb_mat_color_buttons_f);
          } // Fl_Button* mat_color_buttons_[15]
          { image_group_ = new Fl_Group(165, 260, 175, 25, _("Image Size:"));
            image_group_->labelfont(1);
            image_group_->align(FL_ALIGN_LEFT);
            { image_width_value_ = new Fl_Spinner(165, 260, 50, 25, _("x"));
              image_width_value_->maximum(999);
              image_width_value_->step(0.01);
              image_width_value_->value(6);
              image_width_value_->align(FL_ALIGN_RIGHT);
              image_width_value_->format("%.2f");
            } // Fl_Spinner* image_width_value_
            { image_length_value_ = new Fl_Spinner(230, 260, 50, 25);
              image_length_value_->maximum(999);
              image_length_value_->step(0.01);
              image_length_value_->value(4);
              image_length_value_->align(FL_ALIGN_RIGHT);
              image_length_value_->format("%.2f");
            } // Fl_Spinner* image_length_value_
            { image_units_ = new Fl_Choice(280, 260, 60, 25);
              image_units_->down_box(FL_BORDER_BOX);
              image_units_->menu(menu_image_units_);
            } // Fl_Choice* image_units_
            image_group_->end();
          } // Fl_Group* image_group_
          { image_cols_value_ = new Fl_Spinner(165, 295, 35, 25, _("Image Columns:"));
            image_cols_value_->labelfont(1);
            image_cols_value_->maximum(20);
            image_cols_value_->value(1);
          } // Fl_Spinner* image_cols_value_
          { image_rows_value_ = new Fl_Spinner(270, 295, 35, 25, _("Rows:"));
            image_rows_value_->labelfont(1);
            image_rows_value_->maximum(20);
            image_rows_value_->value(1);
          } // Fl_Spinner* image_rows_value_
          { Fl_Group* o = new Fl_Group(165, 330, 200, 25, _("Options:"));
            o->labelfont(1);
            o->align(FL_ALIGN_LEFT);
            { mat_comments_button_ = new Fl_Check_Button(165, 330, 200, 25, _("Show Comments"));
              mat_comments_button_->down_box(FL_DOWN_BOX);
            } // Fl_Check_Button* mat_comments_button_
            o->end();
          } // Fl_Group* o
          mat_group_->end();
        } // Fl_Group* mat_group_
        tabs_->auto_resize(true);
        tabs_->end();
        Fl_Group::current()->resizable(tabs_);
      } // MenuTabs* tabs_
      { SmartGroup* o = new SmartGroup(10, 375, 415, 25);
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_RELEASE);
        { Fl_Button* o = new Fl_Button(215, 375, 105, 25, _("Print"));
          o->box(FL_UP_BOX);
          o->shortcut(0xff0d);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->callback((Fl_Callback*)cb_Print);
          o->align(FL_ALIGN_CENTER);
          o->when(FL_WHEN_RELEASE);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(330, 375, 95, 25, _("Cancel"));
          o->callback((Fl_Callback*)cb_Cancel);
        } // Fl_Button* o
        o->do_layout(FL_ALIGN_RIGHT, 0);
        o->child_align(FL_ALIGN_RIGHT);
        o->end();
      } // SmartGroup* o
      control_group_->end();
      Fl_Group::current()->resizable(control_group_);
    } // Fl_Group* control_group_
    { progress_ = new Fl_Progress(10, 375, 195, 25, _("Progress"));
      progress_->selection_color((Fl_Color)4);
      progress_->labelfont(2);
    } // Fl_Progress* progress_
    window_->set_modal();
    window_->end();
  } // SpringWindow* window_
  { date_window_ = new Fl_Double_Window(425, 325, _("Calendar Dates"));
    date_window_->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 10, 405, 270);
      o->box(FL_THIN_DOWN_BOX);
      o->color((Fl_Color)48);
      { date_browser_ = new Fl_Browser(20, 38, 385, 125, _("Dates:"));
        date_browser_->type(2);
        date_browser_->labelfont(1);
        date_browser_->callback((Fl_Callback*)cb_date_browser_);
        date_browser_->align(FL_ALIGN_TOP_LEFT);
        date_browser_->when(3);
      } // Fl_Browser* date_browser_
      { Fl_Button* o = new Fl_Button(20, 170, 20, 20, _("@-5plus"));
        o->callback((Fl_Callback*)cb_5plus);
      } // Fl_Button* o
      { date_remove_button_ = new Fl_Button(50, 170, 20, 20, _("@-33plus"));
        date_remove_button_->callback((Fl_Callback*)cb_date_remove_button_);
        date_remove_button_->deactivate();
      } // Fl_Button* date_remove_button_
      { SmartGroup* o = new SmartGroup(20, 180, 385, 100);
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_RELEASE);
        { date_group_ = new Fl_Group(95, 190, 300, 45, _("\nDate:"));
          date_group_->labelfont(1);
          date_group_->align(FL_ALIGN_LEFT);
          date_group_->deactivate();
          { date_repeat_button_ = new Fl_Check_Button(228, 210, 167, 25, _("Repeat Every Year"));
            date_repeat_button_->down_box(FL_DOWN_BOX);
            date_repeat_button_->callback((Fl_Callback*)cb_date_repeat_button_);
          } // Fl_Check_Button* date_repeat_button_
          { date_year_ = new Fl_Spinner(95, 210, 53, 25, _("Year"));
            date_year_->minimum(1900);
            date_year_->maximum(2037);
            date_year_->value(2006);
            date_year_->callback((Fl_Callback*)cb_date_year_);
            date_year_->align(FL_ALIGN_TOP);
            date_year_->when(FL_WHEN_CHANGED);
            date_year_->format("%04.0f");
          } // Fl_Spinner* date_year_
          { date_month_ = new Fl_Spinner(148, 210, 35, 25, _("Mon"));
            date_month_->maximum(12);
            date_month_->value(12);
            date_month_->callback((Fl_Callback*)cb_date_month_);
            date_month_->align(FL_ALIGN_TOP);
            date_month_->when(FL_WHEN_CHANGED);
            date_month_->format("%02.0f");
          } // Fl_Spinner* date_month_
          { date_day_ = new Fl_Spinner(183, 210, 35, 25, _("Day"));
            date_day_->maximum(31);
            date_day_->value(31);
            date_day_->callback((Fl_Callback*)cb_date_day_);
            date_day_->align(FL_ALIGN_TOP);
            date_day_->when(FL_WHEN_CHANGED);
            date_day_->format("%02.0f");
          } // Fl_Spinner* date_day_
          date_group_->end();
        } // Fl_Group* date_group_
        { date_comment_ = new Fl_Input(95, 245, 300, 25, _("Comment:"));
          date_comment_->labelfont(1);
          date_comment_->callback((Fl_Callback*)cb_date_comment_);
          date_comment_->deactivate();
        } // Fl_Input* date_comment_
        o->do_layout();
        o->end();
      } // SmartGroup* o
      { Fl_Button* o = new Fl_Button(80, 170, 20, 20, _("@-4reload"));
        o->callback((Fl_Callback*)cb_4reload);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { SmartGroup* o = new SmartGroup(10, 290, 405, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP);
      o->when(FL_WHEN_RELEASE);
      { Fl_Button* o = new Fl_Button(240, 290, 97, 25, _("Save Dates"));
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(347, 290, 68, 25, _("Cancel"));
        o->callback((Fl_Callback*)cb_Cancel1);
      } // Fl_Button* o
      o->do_layout(FL_ALIGN_RIGHT, 0);
      o->child_align(FL_ALIGN_RIGHT);
      o->end();
    } // SmartGroup* o
    date_window_->set_modal();
    date_window_->end();
  } // Fl_Double_Window* date_window_
  callback_          = 0;
calldata_          = 0;
image_browser_     = 0;
mat_preview_image_ = 0;
ppd_               = 0;
title_             = "(untitled)";

memset(mat_colors_, 0, sizeof(mat_colors_));

progress_hide();

load_printers();
load_prefs();
mat_type_cb();
}

Fl_Print_Dialog::~Fl_Print_Dialog() {
  delete window_;
if (mat_preview_image_) delete mat_preview_image_;
}

void Fl_Print_Dialog::calendar(int &day, int &month, int &year, int &orient, int &bound, char *datefile, int dfsize) {
  day   = 8 - calendar_day_chooser_->value();
month = calendar_month_chooser_->value();
year  = (int)calendar_year_value_->value();
if (calendar_left_button_->value()) orient = CALENDAR_LEFT;
else if (calendar_top_button_->value()) orient = CALENDAR_TOP;
else orient = CALENDAR_AUTO;
bound = calendar_type_chooser_->value();
strlcpy(datefile, calendar_file_field_->value(), dfsize);
}

void Fl_Print_Dialog::callback(const char *(*cb)(Fl_Print_Dialog *pd, void *d), void *d) {
  callback_ = cb;
calldata_ = d;
}

void Fl_Print_Dialog::copies(int c) {
  if (c < 1) c = 1;
if (c > 100) c = 100;

copies_value_->value(c);
}

int Fl_Print_Dialog::copies() {
  return (int)copies_value_->value();
}

int Fl_Print_Dialog::have_ppd() {
  return (ppd_ != 0);
}

void Fl_Print_Dialog::hide() {
  window_->hide();
}

void Fl_Print_Dialog::mode(int m) {
  mode_chooser_->value(m);
}

int Fl_Print_Dialog::mode() {
  return mode_chooser_->value();
}

int Fl_Print_Dialog::print_to_file() {
  return print_to_file_button_->value() || !printer_chooser_->value();
}

const char * Fl_Print_Dialog::printer() {
  if (printer_chooser_->value() <= 0 ||
    printer_chooser_->value() > (printer_chooser_->size() - 1))
  return 0;
else
  return printer_chooser_->text(printer_chooser_->value());
}

void Fl_Print_Dialog::progress_hide() {
  progress_->hide();
}

void Fl_Print_Dialog::quality(int q) {
  quality_chooser_->value(q);
}

int Fl_Print_Dialog::quality() {
  return quality_chooser_->value();
}

void Fl_Print_Dialog::show() {
  tabs_->value(general_tab_);
window_->hotspot(window_);
window_->show();
progress_hide();
}

int Fl_Print_Dialog::shown() {
  return window_->shown();
}

void Fl_Print_Dialog::title(const char *t) {
  if (t) title_ = t;
else title_ = "(untitled)";
}

const char * Fl_Print_Dialog::title() {
  return title_;
}

int Fl_Print_Dialog::visible() {
  return window_->visible();
}

//
// End of "$Id: Fl_Print_Dialog.cxx 439 2006-12-08 03:26:01Z mike $".
//
