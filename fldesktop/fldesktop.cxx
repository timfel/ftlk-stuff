// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "fldesktop.h"

#include <FL/Fl.H>
#include <fstream>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_JPEG_Image.H>
#include <FL/Fl_XPM_Image.H>
#include <FL/Fl_GIF_Image.H>
#include <FL/Fl_Image.H>
#include <FL/Fl_Shared_Image.H>
#include <Fl/fl_draw.H>

using namespace std;

void okay_callback(Fl_Widget *w, void *data);
void cancel_callback(Fl_Widget *w, void *data);
void name_callback(Fl_Widget *w, void *data);
void find_callback(Fl_Widget *w);

Fl_Input *name, *exec, *comment;
Fl_Input_Choice *icon;
Fl_Check_Button *categories[12];

string filename;
string home;

int main (int argc, char **argv) {

  Fl::scheme("plastic");
  Fl::visual(FL_RGB); 
  Fl::get_system_colors();
  fl_register_images();
  
  Fl_Window* w = new Fl_Window(425,390);
  Fl_Window *o; 
  w->begin(); {
    Fl_Button *okay = new Fl_Button(25, 360, 144, 30, "Okay");
    Fl_Button *cancel = new Fl_Button(255, 360, 143, 30, "Cancel");
     Fl_Group* gruppe = new Fl_Group(25, 202, 375, 133, "Category");
      gruppe->box(FL_THIN_DOWN_BOX);
      gruppe->align(FL_ALIGN_TOP|FL_ALIGN_LEFT);
      gruppe->begin(); {
      categories[0] = new Fl_Check_Button(25, 212, 60, 25, "AudioVideo");
      categories[1] = new Fl_Check_Button(190, 207, 60, 25, "Audio");
      categories[2] = new Fl_Check_Button(330, 207, 60, 25, "Video");
      categories[3] = new Fl_Check_Button(25, 242, 60, 25, "Development");
      categories[4] = new Fl_Check_Button(190, 237, 60, 25, "Education");
      categories[5] = new Fl_Check_Button(330, 237, 60, 25, "Game");
      categories[6] = new Fl_Check_Button(25, 272, 60, 25, "Graphics");
      categories[7] = new Fl_Check_Button(190, 267, 60, 25, "Network");
      categories[8] = new Fl_Check_Button(330, 267, 60, 25, "Office");
      categories[9] = new Fl_Check_Button(25, 302, 60, 25, "Settings");
      categories[10] = new Fl_Check_Button(190, 297, 60, 25, "System");
      categories[11] = new Fl_Check_Button(330, 297, 60, 25, "Utility"); }
      gruppe->end();
    
     name = new Fl_Input(65, 39, 330, 25, "Name");
      name->align(FL_ALIGN_LEFT|FL_ALIGN_RIGHT);
      name->labelsize(10);
      name->when(FL_WHEN_CHANGED);
    
     exec = new Fl_Input(65, 76, 330, 25, "Exec");
      exec->align(FL_ALIGN_LEFT|FL_ALIGN_RIGHT);
      exec->labelsize(10);
    
     comment = new Fl_Input(65, 112, 330, 25, "Comment");
      comment->align(FL_ALIGN_LEFT|FL_ALIGN_RIGHT);
      comment->labelsize(10);
    
     icon = new Fl_Input_Choice(65, 150, 260, 25, "Icon");
     {
      icon->align(FL_ALIGN_LEFT|FL_ALIGN_RIGHT);
      icon->labelsize(10);
      icon->add("accessories-calculator");
      icon->add("accessories-character-map");
	  icon->add("accessories-dictionary");
	  icon->add("accessories-text-editor");
	  icon->add("help-browser");
  	  icon->add("multimedia-volume-control");
	  icon->add("preferences-desktop-accessibility");
	  icon->add("preferences-desktop-font");
	  icon->add("preferences-desktop-keyboard");
	  icon->add("preferences-desktop-locale");
	  icon->add("preferences-desktop-multimedia");
	  icon->add("preferences-desktop-screensaver");
	  icon->add("preferences-desktop-theme");
	  icon->add("preferences-desktop-wallpaper");
	  icon->add("system-file-manager");
	  icon->add("system-software-update");
	  icon->add("utilities-system-monitor");
	  icon->add("utilities-terminal");
	  icon->add("applications-accessories");
	  icon->add("applications-development");
	  icon->add("applications-engineering");
	  icon->add("applications-games");
	  icon->add("applications-graphics");
	  icon->add("applications-internet");
	  icon->add("applications-multimedia");
	  icon->add("applications-office");
	  icon->add("applications-other");
	  icon->add("applications-science");
	  icon->add("applications-system");
	  icon->add("applications-utilities");
	  icon->add("preferences-desktop");
	  icon->add("preferences-desktop-peripherals");
	  icon->add("preferences-desktop-personal");
	  icon->add("preferences-other");
	  icon->add("preferences-system");
	  icon->add("preferences-system-network");
	  icon->add("multimedia-player");
	  icon->add("video-display");
	  icon->add("application-x-executable");
	  icon->add("audio-x-generic");
	  icon->add("image-x-generic");
	  icon->add("package-x-generic");
	  icon->add("video-x-generic");
	  icon->add("network-server");
	  icon->add("user-home"); 
	 }
      
     Fl_Button* find = new Fl_Button(340,140,52,52,"Find");
     find->box(FL_UP_BOX);
    
     home = "Will be saved in: ";
     home += getenv("HOME");
     home += "/.local/share/applications/";
     Fl_Box* savelabel = new Fl_Box(25, 335, 375, 25, home.c_str());
      savelabel->box(FL_THIN_DOWN_BOX);
      savelabel->labelsize(10);
      savelabel->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);      
    
     Fl_Box* toplabel = new Fl_Box(0, 10, 425, 25, "Easy .desktop creator");
      toplabel->align(FL_ALIGN_INSIDE);
      
     okay->callback(okay_callback, w);
     cancel->callback(cancel_callback, w);
     name->callback(name_callback, savelabel);
     find->callback(find_callback);
    }
  w->end();
  w->show(argc, argv);
  return  Fl::run();
}

void okay_callback(Fl_Widget *w, void *data) {
	Fl_Window *window = (Fl_Window*)data;
		
	string categories_string;	
	for (int i = 0; i < 12; i++)
	{
		if (categories[i]->value()==1)
		{
			categories_string+=categories[i]->label();
			categories_string+=";";
		}
	}
	if (categories[11]->value()==1) {
		categories_string+=categories[11]->label();
		categories_string+=";";
	}
		
	
	string save_as;
	save_as = getenv("HOME");
	save_as += "/.local/share/applications/"+filename;
	ofstream outfile(save_as.c_str());
	outfile << "[Desktop Entry]" << endl << "Type=Application" << endl;
	outfile << "Name=" << name->value() << endl; 
	outfile << "Comment=" << comment->value() << endl;
	outfile << "Exec=" << exec->value() << endl;
	outfile << "Icon=" << icon->value() << endl;
	outfile << "Categories=" << categories_string << endl;
	
	window->hide();
}

void cancel_callback(Fl_Widget *w, void *data) {
	Fl_Window *window = (Fl_Window*)data;
	window->hide();
}

void name_callback(Fl_Widget *w, void *data) {
	Fl_Input *name = (Fl_Input*)w;
	Fl_Box *savelabel = (Fl_Box*)data;

	home = "Will be saved in: ";
	home += getenv("HOME");
	home += "/.local/share/applications/";

	filename = (char*)name->value();
	filename += ".desktop";
	
	for (int i = 0; i < strlen(filename.c_str()); i++)
		filename[i] == ' ' ? filename[i]='_' : filename[i]=filename[i];		
	
	home += filename;
	
	savelabel->label(home.c_str());
}
	
void find_callback(Fl_Widget *w) {	
	Fl_Button* find = (Fl_Button*)w;
	
	char* newfile;
	newfile = fl_file_chooser("Choose an icon...", 
							"Image Files (*.{bmp,gif,jpg,png,xpm})",
							"",0);
  	if (newfile != NULL) {
  		icon->value(newfile);
  		
  		Fl_Shared_Image* img;
    	img = (Fl_Shared_Image::get(newfile));
    	Fl_Image *temp;
    	temp = img->copy(48, 48 * img->h() / img->w()); 
    	img->release();
    	img = (Fl_Shared_Image *)temp;
    	find->label("");
    	find->image(img);
    	find->redraw();
  	}
}
